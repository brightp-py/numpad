Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     var -> M NUMBER
Rule 2     var -> M ZERO NUMBER
Rule 3     op0 -> DOT DOT
Rule 4     op0 -> DOT S
Rule 5     op0 -> DOT A
Rule 6     op1 -> S
Rule 7     op1 -> A
Rule 8     op2 -> D
Rule 9     op2 -> M
Rule 10    op3 -> D A
Rule 11    op3 -> M A
Rule 12    op3 -> D S
Rule 13    op3 -> M S
Rule 14    set -> N M
Rule 15    if -> N D
Rule 16    while -> N A D
Rule 17    list_open -> D DOT
Rule 18    list_open -> list_open expr DOT
Rule 19    list -> list_open expr D DOT
Rule 20    paramlist -> N NUMBER DOT
Rule 21    paramlist -> N NUMBER DOT DOT NUMBER paramlist
Rule 22    expr -> NUMBER
Rule 23    expr -> ZERO NUMBER
Rule 24    expr -> ZERO
Rule 25    expr -> var
Rule 26    expr -> list
Rule 27    expr -> expr op0 expr
Rule 28    expr -> expr op1 expr
Rule 29    expr -> expr op2 expr
Rule 30    expr -> expr op3 expr
Rule 31    stmt -> set NUMBER DOT paramlist block
Rule 32    stmt -> set NUMBER DOT expr
Rule 33    stmt -> set ZERO ZERO DOT expr
Rule 34    stmt -> if expr block
Rule 35    stmt -> while expr block
Rule 36    open_block -> stmt
Rule 37    open_block -> open_block stmt
Rule 38    block -> open_block N
Rule 39    program -> block
Rule 40    program -> program N

Terminals, with rules where they appear

A                    : 5 7 10 11 16
D                    : 8 10 12 15 16 17 19
DOT                  : 3 3 4 5 17 18 19 20 21 21 31 32 33
M                    : 1 2 9 11 13 14
N                    : 14 15 16 20 21 38 40
NUMBER               : 1 2 20 21 21 22 23 31 32
S                    : 4 6 12 13
ZERO                 : 2 23 24 33 33
error                : 

Nonterminals, with rules where they appear

block                : 31 34 35 39
expr                 : 18 19 27 27 28 28 29 29 30 30 32 33 34 35
if                   : 34
list                 : 26
list_open            : 18 19
op0                  : 27
op1                  : 28
op2                  : 29
op3                  : 30
open_block           : 37 38
paramlist            : 21 31
program              : 40 0
set                  : 31 32 33
stmt                 : 36 37
var                  : 25
while                : 35

Parsing method: LALR

state 0

    (0) S' -> . program
    (39) program -> . block
    (40) program -> . program N
    (38) block -> . open_block N
    (36) open_block -> . stmt
    (37) open_block -> . open_block stmt
    (31) stmt -> . set NUMBER DOT paramlist block
    (32) stmt -> . set NUMBER DOT expr
    (33) stmt -> . set ZERO ZERO DOT expr
    (34) stmt -> . if expr block
    (35) stmt -> . while expr block
    (14) set -> . N M
    (15) if -> . N D
    (16) while -> . N A D

    N               shift and go to state 3

    program                        shift and go to state 1
    block                          shift and go to state 2
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    set                            shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8

state 1

    (0) S' -> program .
    (40) program -> program . N

    N               shift and go to state 9


state 2

    (39) program -> block .

    N               reduce using rule 39 (program -> block .)
    $end            reduce using rule 39 (program -> block .)


state 3

    (14) set -> N . M
    (15) if -> N . D
    (16) while -> N . A D

    M               shift and go to state 10
    D               shift and go to state 11
    A               shift and go to state 12


state 4

    (38) block -> open_block . N
    (37) open_block -> open_block . stmt
    (31) stmt -> . set NUMBER DOT paramlist block
    (32) stmt -> . set NUMBER DOT expr
    (33) stmt -> . set ZERO ZERO DOT expr
    (34) stmt -> . if expr block
    (35) stmt -> . while expr block
    (14) set -> . N M
    (15) if -> . N D
    (16) while -> . N A D

    N               shift and go to state 13

    stmt                           shift and go to state 14
    set                            shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8

state 5

    (36) open_block -> stmt .

    N               reduce using rule 36 (open_block -> stmt .)


state 6

    (31) stmt -> set . NUMBER DOT paramlist block
    (32) stmt -> set . NUMBER DOT expr
    (33) stmt -> set . ZERO ZERO DOT expr

    NUMBER          shift and go to state 15
    ZERO            shift and go to state 16


state 7

    (34) stmt -> if . expr block
    (22) expr -> . NUMBER
    (23) expr -> . ZERO NUMBER
    (24) expr -> . ZERO
    (25) expr -> . var
    (26) expr -> . list
    (27) expr -> . expr op0 expr
    (28) expr -> . expr op1 expr
    (29) expr -> . expr op2 expr
    (30) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (19) list -> . list_open expr D DOT
    (17) list_open -> . D DOT
    (18) list_open -> . list_open expr DOT

    NUMBER          shift and go to state 18
    ZERO            shift and go to state 19
    M               shift and go to state 22
    D               shift and go to state 24

    expr                           shift and go to state 17
    var                            shift and go to state 20
    list                           shift and go to state 21
    list_open                      shift and go to state 23

state 8

    (35) stmt -> while . expr block
    (22) expr -> . NUMBER
    (23) expr -> . ZERO NUMBER
    (24) expr -> . ZERO
    (25) expr -> . var
    (26) expr -> . list
    (27) expr -> . expr op0 expr
    (28) expr -> . expr op1 expr
    (29) expr -> . expr op2 expr
    (30) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (19) list -> . list_open expr D DOT
    (17) list_open -> . D DOT
    (18) list_open -> . list_open expr DOT

    NUMBER          shift and go to state 18
    ZERO            shift and go to state 19
    M               shift and go to state 22
    D               shift and go to state 24

    expr                           shift and go to state 25
    var                            shift and go to state 20
    list                           shift and go to state 21
    list_open                      shift and go to state 23

state 9

    (40) program -> program N .

    N               reduce using rule 40 (program -> program N .)
    $end            reduce using rule 40 (program -> program N .)


state 10

    (14) set -> N M .

    NUMBER          reduce using rule 14 (set -> N M .)
    ZERO            reduce using rule 14 (set -> N M .)


state 11

    (15) if -> N D .

    NUMBER          reduce using rule 15 (if -> N D .)
    ZERO            reduce using rule 15 (if -> N D .)
    M               reduce using rule 15 (if -> N D .)
    D               reduce using rule 15 (if -> N D .)


state 12

    (16) while -> N A . D

    D               shift and go to state 26


state 13

    (38) block -> open_block N .
    (14) set -> N . M
    (15) if -> N . D
    (16) while -> N . A D

    N               reduce using rule 38 (block -> open_block N .)
    $end            reduce using rule 38 (block -> open_block N .)
    M               shift and go to state 10
    D               shift and go to state 11
    A               shift and go to state 12


state 14

    (37) open_block -> open_block stmt .

    N               reduce using rule 37 (open_block -> open_block stmt .)


state 15

    (31) stmt -> set NUMBER . DOT paramlist block
    (32) stmt -> set NUMBER . DOT expr

    DOT             shift and go to state 27


state 16

    (33) stmt -> set ZERO . ZERO DOT expr

    ZERO            shift and go to state 28


state 17

    (34) stmt -> if expr . block
    (27) expr -> expr . op0 expr
    (28) expr -> expr . op1 expr
    (29) expr -> expr . op2 expr
    (30) expr -> expr . op3 expr
    (38) block -> . open_block N
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S
    (36) open_block -> . stmt
    (37) open_block -> . open_block stmt
    (31) stmt -> . set NUMBER DOT paramlist block
    (32) stmt -> . set NUMBER DOT expr
    (33) stmt -> . set ZERO ZERO DOT expr
    (34) stmt -> . if expr block
    (35) stmt -> . while expr block
    (14) set -> . N M
    (15) if -> . N D
    (16) while -> . N A D

    DOT             shift and go to state 34
    S               shift and go to state 35
    A               shift and go to state 36
    D               shift and go to state 37
    M               shift and go to state 38
    N               shift and go to state 3

    if                             shift and go to state 7
    block                          shift and go to state 29
    op0                            shift and go to state 30
    op1                            shift and go to state 31
    op2                            shift and go to state 32
    op3                            shift and go to state 33
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    set                            shift and go to state 6
    while                          shift and go to state 8

state 18

    (22) expr -> NUMBER .

    DOT             reduce using rule 22 (expr -> NUMBER .)
    S               reduce using rule 22 (expr -> NUMBER .)
    A               reduce using rule 22 (expr -> NUMBER .)
    D               reduce using rule 22 (expr -> NUMBER .)
    M               reduce using rule 22 (expr -> NUMBER .)
    N               reduce using rule 22 (expr -> NUMBER .)


state 19

    (23) expr -> ZERO . NUMBER
    (24) expr -> ZERO .

    NUMBER          shift and go to state 39
    DOT             reduce using rule 24 (expr -> ZERO .)
    S               reduce using rule 24 (expr -> ZERO .)
    A               reduce using rule 24 (expr -> ZERO .)
    D               reduce using rule 24 (expr -> ZERO .)
    M               reduce using rule 24 (expr -> ZERO .)
    N               reduce using rule 24 (expr -> ZERO .)


state 20

    (25) expr -> var .

    DOT             reduce using rule 25 (expr -> var .)
    S               reduce using rule 25 (expr -> var .)
    A               reduce using rule 25 (expr -> var .)
    D               reduce using rule 25 (expr -> var .)
    M               reduce using rule 25 (expr -> var .)
    N               reduce using rule 25 (expr -> var .)


state 21

    (26) expr -> list .

    DOT             reduce using rule 26 (expr -> list .)
    S               reduce using rule 26 (expr -> list .)
    A               reduce using rule 26 (expr -> list .)
    D               reduce using rule 26 (expr -> list .)
    M               reduce using rule 26 (expr -> list .)
    N               reduce using rule 26 (expr -> list .)


state 22

    (1) var -> M . NUMBER
    (2) var -> M . ZERO NUMBER

    NUMBER          shift and go to state 40
    ZERO            shift and go to state 41


state 23

    (19) list -> list_open . expr D DOT
    (18) list_open -> list_open . expr DOT
    (22) expr -> . NUMBER
    (23) expr -> . ZERO NUMBER
    (24) expr -> . ZERO
    (25) expr -> . var
    (26) expr -> . list
    (27) expr -> . expr op0 expr
    (28) expr -> . expr op1 expr
    (29) expr -> . expr op2 expr
    (30) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (19) list -> . list_open expr D DOT
    (17) list_open -> . D DOT
    (18) list_open -> . list_open expr DOT

    NUMBER          shift and go to state 18
    ZERO            shift and go to state 19
    M               shift and go to state 22
    D               shift and go to state 24

    list_open                      shift and go to state 23
    expr                           shift and go to state 42
    var                            shift and go to state 20
    list                           shift and go to state 21

state 24

    (17) list_open -> D . DOT

    DOT             shift and go to state 43


state 25

    (35) stmt -> while expr . block
    (27) expr -> expr . op0 expr
    (28) expr -> expr . op1 expr
    (29) expr -> expr . op2 expr
    (30) expr -> expr . op3 expr
    (38) block -> . open_block N
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S
    (36) open_block -> . stmt
    (37) open_block -> . open_block stmt
    (31) stmt -> . set NUMBER DOT paramlist block
    (32) stmt -> . set NUMBER DOT expr
    (33) stmt -> . set ZERO ZERO DOT expr
    (34) stmt -> . if expr block
    (35) stmt -> . while expr block
    (14) set -> . N M
    (15) if -> . N D
    (16) while -> . N A D

    DOT             shift and go to state 34
    S               shift and go to state 35
    A               shift and go to state 36
    D               shift and go to state 37
    M               shift and go to state 38
    N               shift and go to state 3

    while                          shift and go to state 8
    block                          shift and go to state 44
    op0                            shift and go to state 30
    op1                            shift and go to state 31
    op2                            shift and go to state 32
    op3                            shift and go to state 33
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    set                            shift and go to state 6
    if                             shift and go to state 7

state 26

    (16) while -> N A D .

    NUMBER          reduce using rule 16 (while -> N A D .)
    ZERO            reduce using rule 16 (while -> N A D .)
    M               reduce using rule 16 (while -> N A D .)
    D               reduce using rule 16 (while -> N A D .)


state 27

    (31) stmt -> set NUMBER DOT . paramlist block
    (32) stmt -> set NUMBER DOT . expr
    (20) paramlist -> . N NUMBER DOT
    (21) paramlist -> . N NUMBER DOT DOT NUMBER paramlist
    (22) expr -> . NUMBER
    (23) expr -> . ZERO NUMBER
    (24) expr -> . ZERO
    (25) expr -> . var
    (26) expr -> . list
    (27) expr -> . expr op0 expr
    (28) expr -> . expr op1 expr
    (29) expr -> . expr op2 expr
    (30) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (19) list -> . list_open expr D DOT
    (17) list_open -> . D DOT
    (18) list_open -> . list_open expr DOT

    N               shift and go to state 47
    NUMBER          shift and go to state 18
    ZERO            shift and go to state 19
    M               shift and go to state 22
    D               shift and go to state 24

    paramlist                      shift and go to state 45
    expr                           shift and go to state 46
    var                            shift and go to state 20
    list                           shift and go to state 21
    list_open                      shift and go to state 23

state 28

    (33) stmt -> set ZERO ZERO . DOT expr

    DOT             shift and go to state 48


state 29

    (34) stmt -> if expr block .

    N               reduce using rule 34 (stmt -> if expr block .)


state 30

    (27) expr -> expr op0 . expr
    (22) expr -> . NUMBER
    (23) expr -> . ZERO NUMBER
    (24) expr -> . ZERO
    (25) expr -> . var
    (26) expr -> . list
    (27) expr -> . expr op0 expr
    (28) expr -> . expr op1 expr
    (29) expr -> . expr op2 expr
    (30) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (19) list -> . list_open expr D DOT
    (17) list_open -> . D DOT
    (18) list_open -> . list_open expr DOT

    NUMBER          shift and go to state 18
    ZERO            shift and go to state 19
    M               shift and go to state 22
    D               shift and go to state 24

    expr                           shift and go to state 49
    var                            shift and go to state 20
    list                           shift and go to state 21
    list_open                      shift and go to state 23

state 31

    (28) expr -> expr op1 . expr
    (22) expr -> . NUMBER
    (23) expr -> . ZERO NUMBER
    (24) expr -> . ZERO
    (25) expr -> . var
    (26) expr -> . list
    (27) expr -> . expr op0 expr
    (28) expr -> . expr op1 expr
    (29) expr -> . expr op2 expr
    (30) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (19) list -> . list_open expr D DOT
    (17) list_open -> . D DOT
    (18) list_open -> . list_open expr DOT

    NUMBER          shift and go to state 18
    ZERO            shift and go to state 19
    M               shift and go to state 22
    D               shift and go to state 24

    expr                           shift and go to state 50
    var                            shift and go to state 20
    list                           shift and go to state 21
    list_open                      shift and go to state 23

state 32

    (29) expr -> expr op2 . expr
    (22) expr -> . NUMBER
    (23) expr -> . ZERO NUMBER
    (24) expr -> . ZERO
    (25) expr -> . var
    (26) expr -> . list
    (27) expr -> . expr op0 expr
    (28) expr -> . expr op1 expr
    (29) expr -> . expr op2 expr
    (30) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (19) list -> . list_open expr D DOT
    (17) list_open -> . D DOT
    (18) list_open -> . list_open expr DOT

    NUMBER          shift and go to state 18
    ZERO            shift and go to state 19
    M               shift and go to state 22
    D               shift and go to state 24

    expr                           shift and go to state 51
    var                            shift and go to state 20
    list                           shift and go to state 21
    list_open                      shift and go to state 23

state 33

    (30) expr -> expr op3 . expr
    (22) expr -> . NUMBER
    (23) expr -> . ZERO NUMBER
    (24) expr -> . ZERO
    (25) expr -> . var
    (26) expr -> . list
    (27) expr -> . expr op0 expr
    (28) expr -> . expr op1 expr
    (29) expr -> . expr op2 expr
    (30) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (19) list -> . list_open expr D DOT
    (17) list_open -> . D DOT
    (18) list_open -> . list_open expr DOT

    NUMBER          shift and go to state 18
    ZERO            shift and go to state 19
    M               shift and go to state 22
    D               shift and go to state 24

    expr                           shift and go to state 52
    var                            shift and go to state 20
    list                           shift and go to state 21
    list_open                      shift and go to state 23

state 34

    (3) op0 -> DOT . DOT
    (4) op0 -> DOT . S
    (5) op0 -> DOT . A

    DOT             shift and go to state 53
    S               shift and go to state 54
    A               shift and go to state 55


state 35

    (6) op1 -> S .

    NUMBER          reduce using rule 6 (op1 -> S .)
    ZERO            reduce using rule 6 (op1 -> S .)
    M               reduce using rule 6 (op1 -> S .)
    D               reduce using rule 6 (op1 -> S .)


state 36

    (7) op1 -> A .

    NUMBER          reduce using rule 7 (op1 -> A .)
    ZERO            reduce using rule 7 (op1 -> A .)
    M               reduce using rule 7 (op1 -> A .)
    D               reduce using rule 7 (op1 -> A .)


state 37

    (8) op2 -> D .
    (10) op3 -> D . A
    (12) op3 -> D . S

    NUMBER          reduce using rule 8 (op2 -> D .)
    ZERO            reduce using rule 8 (op2 -> D .)
    M               reduce using rule 8 (op2 -> D .)
    D               reduce using rule 8 (op2 -> D .)
    A               shift and go to state 56
    S               shift and go to state 57


state 38

    (9) op2 -> M .
    (11) op3 -> M . A
    (13) op3 -> M . S

    NUMBER          reduce using rule 9 (op2 -> M .)
    ZERO            reduce using rule 9 (op2 -> M .)
    M               reduce using rule 9 (op2 -> M .)
    D               reduce using rule 9 (op2 -> M .)
    A               shift and go to state 58
    S               shift and go to state 59


state 39

    (23) expr -> ZERO NUMBER .

    DOT             reduce using rule 23 (expr -> ZERO NUMBER .)
    S               reduce using rule 23 (expr -> ZERO NUMBER .)
    A               reduce using rule 23 (expr -> ZERO NUMBER .)
    D               reduce using rule 23 (expr -> ZERO NUMBER .)
    M               reduce using rule 23 (expr -> ZERO NUMBER .)
    N               reduce using rule 23 (expr -> ZERO NUMBER .)


state 40

    (1) var -> M NUMBER .

    DOT             reduce using rule 1 (var -> M NUMBER .)
    S               reduce using rule 1 (var -> M NUMBER .)
    A               reduce using rule 1 (var -> M NUMBER .)
    D               reduce using rule 1 (var -> M NUMBER .)
    M               reduce using rule 1 (var -> M NUMBER .)
    N               reduce using rule 1 (var -> M NUMBER .)


state 41

    (2) var -> M ZERO . NUMBER

    NUMBER          shift and go to state 60


state 42

    (19) list -> list_open expr . D DOT
    (18) list_open -> list_open expr . DOT
    (27) expr -> expr . op0 expr
    (28) expr -> expr . op1 expr
    (29) expr -> expr . op2 expr
    (30) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    D               shift and go to state 61
    DOT             shift and go to state 62
    S               shift and go to state 35
    A               shift and go to state 36
    M               shift and go to state 38

    op0                            shift and go to state 30
    op1                            shift and go to state 31
    op2                            shift and go to state 32
    op3                            shift and go to state 33

state 43

    (17) list_open -> D DOT .

    NUMBER          reduce using rule 17 (list_open -> D DOT .)
    ZERO            reduce using rule 17 (list_open -> D DOT .)
    M               reduce using rule 17 (list_open -> D DOT .)
    D               reduce using rule 17 (list_open -> D DOT .)


state 44

    (35) stmt -> while expr block .

    N               reduce using rule 35 (stmt -> while expr block .)


state 45

    (31) stmt -> set NUMBER DOT paramlist . block
    (38) block -> . open_block N
    (36) open_block -> . stmt
    (37) open_block -> . open_block stmt
    (31) stmt -> . set NUMBER DOT paramlist block
    (32) stmt -> . set NUMBER DOT expr
    (33) stmt -> . set ZERO ZERO DOT expr
    (34) stmt -> . if expr block
    (35) stmt -> . while expr block
    (14) set -> . N M
    (15) if -> . N D
    (16) while -> . N A D

    N               shift and go to state 3

    set                            shift and go to state 6
    block                          shift and go to state 63
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    if                             shift and go to state 7
    while                          shift and go to state 8

state 46

    (32) stmt -> set NUMBER DOT expr .
    (27) expr -> expr . op0 expr
    (28) expr -> expr . op1 expr
    (29) expr -> expr . op2 expr
    (30) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    N               reduce using rule 32 (stmt -> set NUMBER DOT expr .)
    DOT             shift and go to state 34
    S               shift and go to state 35
    A               shift and go to state 36
    D               shift and go to state 37
    M               shift and go to state 38

    op0                            shift and go to state 30
    op1                            shift and go to state 31
    op2                            shift and go to state 32
    op3                            shift and go to state 33

state 47

    (20) paramlist -> N . NUMBER DOT
    (21) paramlist -> N . NUMBER DOT DOT NUMBER paramlist

    NUMBER          shift and go to state 64


state 48

    (33) stmt -> set ZERO ZERO DOT . expr
    (22) expr -> . NUMBER
    (23) expr -> . ZERO NUMBER
    (24) expr -> . ZERO
    (25) expr -> . var
    (26) expr -> . list
    (27) expr -> . expr op0 expr
    (28) expr -> . expr op1 expr
    (29) expr -> . expr op2 expr
    (30) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (19) list -> . list_open expr D DOT
    (17) list_open -> . D DOT
    (18) list_open -> . list_open expr DOT

    NUMBER          shift and go to state 18
    ZERO            shift and go to state 19
    M               shift and go to state 22
    D               shift and go to state 24

    expr                           shift and go to state 65
    var                            shift and go to state 20
    list                           shift and go to state 21
    list_open                      shift and go to state 23

state 49

    (27) expr -> expr op0 expr .
    (27) expr -> expr . op0 expr
    (28) expr -> expr . op1 expr
    (29) expr -> expr . op2 expr
    (30) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    DOT             reduce using rule 27 (expr -> expr op0 expr .)
    S               reduce using rule 27 (expr -> expr op0 expr .)
    A               reduce using rule 27 (expr -> expr op0 expr .)
    D               reduce using rule 27 (expr -> expr op0 expr .)
    M               reduce using rule 27 (expr -> expr op0 expr .)
    N               reduce using rule 27 (expr -> expr op0 expr .)

  ! DOT             [ shift and go to state 34 ]
  ! S               [ shift and go to state 35 ]
  ! A               [ shift and go to state 36 ]
  ! D               [ shift and go to state 37 ]
  ! M               [ shift and go to state 38 ]

    op0                            shift and go to state 30
    op1                            shift and go to state 31
    op2                            shift and go to state 32
    op3                            shift and go to state 33

state 50

    (28) expr -> expr op1 expr .
    (27) expr -> expr . op0 expr
    (28) expr -> expr . op1 expr
    (29) expr -> expr . op2 expr
    (30) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    DOT             reduce using rule 28 (expr -> expr op1 expr .)
    S               reduce using rule 28 (expr -> expr op1 expr .)
    A               reduce using rule 28 (expr -> expr op1 expr .)
    D               reduce using rule 28 (expr -> expr op1 expr .)
    M               reduce using rule 28 (expr -> expr op1 expr .)
    N               reduce using rule 28 (expr -> expr op1 expr .)

  ! DOT             [ shift and go to state 34 ]
  ! S               [ shift and go to state 35 ]
  ! A               [ shift and go to state 36 ]
  ! D               [ shift and go to state 37 ]
  ! M               [ shift and go to state 38 ]

    op1                            shift and go to state 31
    op0                            shift and go to state 30
    op2                            shift and go to state 32
    op3                            shift and go to state 33

state 51

    (29) expr -> expr op2 expr .
    (27) expr -> expr . op0 expr
    (28) expr -> expr . op1 expr
    (29) expr -> expr . op2 expr
    (30) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    DOT             reduce using rule 29 (expr -> expr op2 expr .)
    S               reduce using rule 29 (expr -> expr op2 expr .)
    A               reduce using rule 29 (expr -> expr op2 expr .)
    D               reduce using rule 29 (expr -> expr op2 expr .)
    M               reduce using rule 29 (expr -> expr op2 expr .)
    N               reduce using rule 29 (expr -> expr op2 expr .)

  ! DOT             [ shift and go to state 34 ]
  ! S               [ shift and go to state 35 ]
  ! A               [ shift and go to state 36 ]
  ! D               [ shift and go to state 37 ]
  ! M               [ shift and go to state 38 ]

    op2                            shift and go to state 32
    op0                            shift and go to state 30
    op1                            shift and go to state 31
    op3                            shift and go to state 33

state 52

    (30) expr -> expr op3 expr .
    (27) expr -> expr . op0 expr
    (28) expr -> expr . op1 expr
    (29) expr -> expr . op2 expr
    (30) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    DOT             reduce using rule 30 (expr -> expr op3 expr .)
    S               reduce using rule 30 (expr -> expr op3 expr .)
    A               reduce using rule 30 (expr -> expr op3 expr .)
    D               reduce using rule 30 (expr -> expr op3 expr .)
    M               reduce using rule 30 (expr -> expr op3 expr .)
    N               reduce using rule 30 (expr -> expr op3 expr .)

  ! DOT             [ shift and go to state 34 ]
  ! S               [ shift and go to state 35 ]
  ! A               [ shift and go to state 36 ]
  ! D               [ shift and go to state 37 ]
  ! M               [ shift and go to state 38 ]

    op3                            shift and go to state 33
    op0                            shift and go to state 30
    op1                            shift and go to state 31
    op2                            shift and go to state 32

state 53

    (3) op0 -> DOT DOT .

    NUMBER          reduce using rule 3 (op0 -> DOT DOT .)
    ZERO            reduce using rule 3 (op0 -> DOT DOT .)
    M               reduce using rule 3 (op0 -> DOT DOT .)
    D               reduce using rule 3 (op0 -> DOT DOT .)


state 54

    (4) op0 -> DOT S .

    NUMBER          reduce using rule 4 (op0 -> DOT S .)
    ZERO            reduce using rule 4 (op0 -> DOT S .)
    M               reduce using rule 4 (op0 -> DOT S .)
    D               reduce using rule 4 (op0 -> DOT S .)


state 55

    (5) op0 -> DOT A .

    NUMBER          reduce using rule 5 (op0 -> DOT A .)
    ZERO            reduce using rule 5 (op0 -> DOT A .)
    M               reduce using rule 5 (op0 -> DOT A .)
    D               reduce using rule 5 (op0 -> DOT A .)


state 56

    (10) op3 -> D A .

    NUMBER          reduce using rule 10 (op3 -> D A .)
    ZERO            reduce using rule 10 (op3 -> D A .)
    M               reduce using rule 10 (op3 -> D A .)
    D               reduce using rule 10 (op3 -> D A .)


state 57

    (12) op3 -> D S .

    NUMBER          reduce using rule 12 (op3 -> D S .)
    ZERO            reduce using rule 12 (op3 -> D S .)
    M               reduce using rule 12 (op3 -> D S .)
    D               reduce using rule 12 (op3 -> D S .)


state 58

    (11) op3 -> M A .

    NUMBER          reduce using rule 11 (op3 -> M A .)
    ZERO            reduce using rule 11 (op3 -> M A .)
    M               reduce using rule 11 (op3 -> M A .)
    D               reduce using rule 11 (op3 -> M A .)


state 59

    (13) op3 -> M S .

    NUMBER          reduce using rule 13 (op3 -> M S .)
    ZERO            reduce using rule 13 (op3 -> M S .)
    M               reduce using rule 13 (op3 -> M S .)
    D               reduce using rule 13 (op3 -> M S .)


state 60

    (2) var -> M ZERO NUMBER .

    DOT             reduce using rule 2 (var -> M ZERO NUMBER .)
    S               reduce using rule 2 (var -> M ZERO NUMBER .)
    A               reduce using rule 2 (var -> M ZERO NUMBER .)
    D               reduce using rule 2 (var -> M ZERO NUMBER .)
    M               reduce using rule 2 (var -> M ZERO NUMBER .)
    N               reduce using rule 2 (var -> M ZERO NUMBER .)


state 61

    (19) list -> list_open expr D . DOT
    (8) op2 -> D .
    (10) op3 -> D . A
    (12) op3 -> D . S

    DOT             shift and go to state 66
    NUMBER          reduce using rule 8 (op2 -> D .)
    ZERO            reduce using rule 8 (op2 -> D .)
    M               reduce using rule 8 (op2 -> D .)
    D               reduce using rule 8 (op2 -> D .)
    A               shift and go to state 56
    S               shift and go to state 57


state 62

    (18) list_open -> list_open expr DOT .
    (3) op0 -> DOT . DOT
    (4) op0 -> DOT . S
    (5) op0 -> DOT . A

    NUMBER          reduce using rule 18 (list_open -> list_open expr DOT .)
    ZERO            reduce using rule 18 (list_open -> list_open expr DOT .)
    M               reduce using rule 18 (list_open -> list_open expr DOT .)
    D               reduce using rule 18 (list_open -> list_open expr DOT .)
    DOT             shift and go to state 53
    S               shift and go to state 54
    A               shift and go to state 55


state 63

    (31) stmt -> set NUMBER DOT paramlist block .

    N               reduce using rule 31 (stmt -> set NUMBER DOT paramlist block .)


state 64

    (20) paramlist -> N NUMBER . DOT
    (21) paramlist -> N NUMBER . DOT DOT NUMBER paramlist

    DOT             shift and go to state 67


state 65

    (33) stmt -> set ZERO ZERO DOT expr .
    (27) expr -> expr . op0 expr
    (28) expr -> expr . op1 expr
    (29) expr -> expr . op2 expr
    (30) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    N               reduce using rule 33 (stmt -> set ZERO ZERO DOT expr .)
    DOT             shift and go to state 34
    S               shift and go to state 35
    A               shift and go to state 36
    D               shift and go to state 37
    M               shift and go to state 38

    op0                            shift and go to state 30
    op1                            shift and go to state 31
    op2                            shift and go to state 32
    op3                            shift and go to state 33

state 66

    (19) list -> list_open expr D DOT .

    DOT             reduce using rule 19 (list -> list_open expr D DOT .)
    S               reduce using rule 19 (list -> list_open expr D DOT .)
    A               reduce using rule 19 (list -> list_open expr D DOT .)
    D               reduce using rule 19 (list -> list_open expr D DOT .)
    M               reduce using rule 19 (list -> list_open expr D DOT .)
    N               reduce using rule 19 (list -> list_open expr D DOT .)


state 67

    (20) paramlist -> N NUMBER DOT .
    (21) paramlist -> N NUMBER DOT . DOT NUMBER paramlist

    N               reduce using rule 20 (paramlist -> N NUMBER DOT .)
    DOT             shift and go to state 68


state 68

    (21) paramlist -> N NUMBER DOT DOT . NUMBER paramlist

    NUMBER          shift and go to state 69


state 69

    (21) paramlist -> N NUMBER DOT DOT NUMBER . paramlist
    (20) paramlist -> . N NUMBER DOT
    (21) paramlist -> . N NUMBER DOT DOT NUMBER paramlist

    N               shift and go to state 47

    paramlist                      shift and go to state 70

state 70

    (21) paramlist -> N NUMBER DOT DOT NUMBER paramlist .

    N               reduce using rule 21 (paramlist -> N NUMBER DOT DOT NUMBER paramlist .)

