Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     var -> M NUMBER
Rule 2     var -> M ZERO NUMBER
Rule 3     op0 -> DOT DOT
Rule 4     op0 -> DOT S
Rule 5     op0 -> DOT A
Rule 6     op1 -> S
Rule 7     op1 -> A
Rule 8     op2 -> D
Rule 9     op2 -> M
Rule 10    op3 -> D A
Rule 11    op3 -> M A
Rule 12    op3 -> D S
Rule 13    op3 -> M S
Rule 14    set -> N M
Rule 15    if -> N D
Rule 16    else -> S D
Rule 17    while -> N A D
Rule 18    list_open -> D DOT
Rule 19    list_open -> list_open expr DOT
Rule 20    list_open -> list_open expr DOT N
Rule 21    list -> list_open expr D DOT
Rule 22    list -> D DOT DOT D
Rule 23    paramlist -> N NUMBER DOT
Rule 24    paramlist -> N NUMBER DOT DOT NUMBER paramlist
Rule 25    expr -> NUMBER
Rule 26    expr -> ZERO NUMBER
Rule 27    expr -> ZERO
Rule 28    expr -> var
Rule 29    expr -> list
Rule 30    expr -> expr op0 expr
Rule 31    expr -> expr op1 expr
Rule 32    expr -> expr op2 expr
Rule 33    expr -> expr op3 expr
Rule 34    stmt_def -> set NUMBER DOT paramlist block
Rule 35    stmt_set -> set NUMBER DOT expr
Rule 36    stmt_ind_open -> set NUMBER D NUMBER
Rule 37    stmt_ind_open -> set NUMBER D ZERO
Rule 38    stmt_ind_open -> set NUMBER D var
Rule 39    stmt_ind_open -> stmt_ind_open D NUMBER
Rule 40    stmt_ind_open -> stmt_ind_open D ZERO
Rule 41    stmt_ind_open -> stmt_ind_open D var
Rule 42    stmt_ind -> stmt_ind_open DOT expr
Rule 43    stmt_ret -> set ZERO ZERO DOT expr
Rule 44    stmt_if -> if expr block
Rule 45    stmt_elif -> stmt_if else block
Rule 46    stmt_while -> while expr block
Rule 47    stmt -> stmt_def
Rule 48    stmt -> stmt_set
Rule 49    stmt -> stmt_ret
Rule 50    stmt -> stmt_if
Rule 51    stmt -> stmt_elif
Rule 52    stmt -> stmt_while
Rule 53    stmt -> stmt_ind
Rule 54    open_block -> stmt
Rule 55    open_block -> open_block stmt
Rule 56    block -> open_block N
Rule 57    program -> block
Rule 58    program -> program N

Terminals, with rules where they appear

A                    : 5 7 10 11 17
D                    : 8 10 12 15 16 17 18 21 22 22 36 37 38 39 40 41
DOT                  : 3 3 4 5 18 19 20 21 22 22 23 24 24 34 35 42 43
M                    : 1 2 9 11 13 14
N                    : 14 15 17 20 23 24 56 58
NUMBER               : 1 2 23 24 24 25 26 34 35 36 36 37 38 39
S                    : 4 6 12 13 16
ZERO                 : 2 26 27 37 40 43 43
error                : 

Nonterminals, with rules where they appear

block                : 34 44 45 46 57
else                 : 45
expr                 : 19 20 21 30 30 31 31 32 32 33 33 35 42 43 44 46
if                   : 44
list                 : 29
list_open            : 19 20 21
op0                  : 30
op1                  : 31
op2                  : 32
op3                  : 33
open_block           : 55 56
paramlist            : 24 34
program              : 58 0
set                  : 34 35 36 37 38 43
stmt                 : 54 55
stmt_def             : 47
stmt_elif            : 51
stmt_if              : 45 50
stmt_ind             : 53
stmt_ind_open        : 39 40 41 42
stmt_ret             : 49
stmt_set             : 48
stmt_while           : 52
var                  : 28 38 41
while                : 46

Parsing method: LALR

state 0

    (0) S' -> . program
    (57) program -> . block
    (58) program -> . program N
    (56) block -> . open_block N
    (54) open_block -> . stmt
    (55) open_block -> . open_block stmt
    (47) stmt -> . stmt_def
    (48) stmt -> . stmt_set
    (49) stmt -> . stmt_ret
    (50) stmt -> . stmt_if
    (51) stmt -> . stmt_elif
    (52) stmt -> . stmt_while
    (53) stmt -> . stmt_ind
    (34) stmt_def -> . set NUMBER DOT paramlist block
    (35) stmt_set -> . set NUMBER DOT expr
    (43) stmt_ret -> . set ZERO ZERO DOT expr
    (44) stmt_if -> . if expr block
    (45) stmt_elif -> . stmt_if else block
    (46) stmt_while -> . while expr block
    (42) stmt_ind -> . stmt_ind_open DOT expr
    (14) set -> . N M
    (15) if -> . N D
    (17) while -> . N A D
    (36) stmt_ind_open -> . set NUMBER D NUMBER
    (37) stmt_ind_open -> . set NUMBER D ZERO
    (38) stmt_ind_open -> . set NUMBER D var
    (39) stmt_ind_open -> . stmt_ind_open D NUMBER
    (40) stmt_ind_open -> . stmt_ind_open D ZERO
    (41) stmt_ind_open -> . stmt_ind_open D var

    N               shift and go to state 3

    program                        shift and go to state 1
    block                          shift and go to state 2
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    stmt_def                       shift and go to state 6
    stmt_set                       shift and go to state 7
    stmt_ret                       shift and go to state 8
    stmt_if                        shift and go to state 9
    stmt_elif                      shift and go to state 10
    stmt_while                     shift and go to state 11
    stmt_ind                       shift and go to state 12
    set                            shift and go to state 13
    if                             shift and go to state 14
    while                          shift and go to state 15
    stmt_ind_open                  shift and go to state 16

state 1

    (0) S' -> program .
    (58) program -> program . N

    N               shift and go to state 17


state 2

    (57) program -> block .

    N               reduce using rule 57 (program -> block .)
    $end            reduce using rule 57 (program -> block .)


state 3

    (14) set -> N . M
    (15) if -> N . D
    (17) while -> N . A D

    M               shift and go to state 18
    D               shift and go to state 19
    A               shift and go to state 20


state 4

    (56) block -> open_block . N
    (55) open_block -> open_block . stmt
    (47) stmt -> . stmt_def
    (48) stmt -> . stmt_set
    (49) stmt -> . stmt_ret
    (50) stmt -> . stmt_if
    (51) stmt -> . stmt_elif
    (52) stmt -> . stmt_while
    (53) stmt -> . stmt_ind
    (34) stmt_def -> . set NUMBER DOT paramlist block
    (35) stmt_set -> . set NUMBER DOT expr
    (43) stmt_ret -> . set ZERO ZERO DOT expr
    (44) stmt_if -> . if expr block
    (45) stmt_elif -> . stmt_if else block
    (46) stmt_while -> . while expr block
    (42) stmt_ind -> . stmt_ind_open DOT expr
    (14) set -> . N M
    (15) if -> . N D
    (17) while -> . N A D
    (36) stmt_ind_open -> . set NUMBER D NUMBER
    (37) stmt_ind_open -> . set NUMBER D ZERO
    (38) stmt_ind_open -> . set NUMBER D var
    (39) stmt_ind_open -> . stmt_ind_open D NUMBER
    (40) stmt_ind_open -> . stmt_ind_open D ZERO
    (41) stmt_ind_open -> . stmt_ind_open D var

    N               shift and go to state 21

    stmt                           shift and go to state 22
    stmt_def                       shift and go to state 6
    stmt_set                       shift and go to state 7
    stmt_ret                       shift and go to state 8
    stmt_if                        shift and go to state 9
    stmt_elif                      shift and go to state 10
    stmt_while                     shift and go to state 11
    stmt_ind                       shift and go to state 12
    set                            shift and go to state 13
    if                             shift and go to state 14
    while                          shift and go to state 15
    stmt_ind_open                  shift and go to state 16

state 5

    (54) open_block -> stmt .

    N               reduce using rule 54 (open_block -> stmt .)


state 6

    (47) stmt -> stmt_def .

    N               reduce using rule 47 (stmt -> stmt_def .)


state 7

    (48) stmt -> stmt_set .

    N               reduce using rule 48 (stmt -> stmt_set .)


state 8

    (49) stmt -> stmt_ret .

    N               reduce using rule 49 (stmt -> stmt_ret .)


state 9

    (50) stmt -> stmt_if .
    (45) stmt_elif -> stmt_if . else block
    (16) else -> . S D

    N               reduce using rule 50 (stmt -> stmt_if .)
    S               shift and go to state 24

    else                           shift and go to state 23

state 10

    (51) stmt -> stmt_elif .

    N               reduce using rule 51 (stmt -> stmt_elif .)


state 11

    (52) stmt -> stmt_while .

    N               reduce using rule 52 (stmt -> stmt_while .)


state 12

    (53) stmt -> stmt_ind .

    N               reduce using rule 53 (stmt -> stmt_ind .)


state 13

    (34) stmt_def -> set . NUMBER DOT paramlist block
    (35) stmt_set -> set . NUMBER DOT expr
    (43) stmt_ret -> set . ZERO ZERO DOT expr
    (36) stmt_ind_open -> set . NUMBER D NUMBER
    (37) stmt_ind_open -> set . NUMBER D ZERO
    (38) stmt_ind_open -> set . NUMBER D var

    NUMBER          shift and go to state 25
    ZERO            shift and go to state 26


state 14

    (44) stmt_if -> if . expr block
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 28
    ZERO            shift and go to state 29
    M               shift and go to state 32
    D               shift and go to state 34

    expr                           shift and go to state 27
    var                            shift and go to state 30
    list                           shift and go to state 31
    list_open                      shift and go to state 33

state 15

    (46) stmt_while -> while . expr block
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 28
    ZERO            shift and go to state 29
    M               shift and go to state 32
    D               shift and go to state 34

    expr                           shift and go to state 35
    var                            shift and go to state 30
    list                           shift and go to state 31
    list_open                      shift and go to state 33

state 16

    (42) stmt_ind -> stmt_ind_open . DOT expr
    (39) stmt_ind_open -> stmt_ind_open . D NUMBER
    (40) stmt_ind_open -> stmt_ind_open . D ZERO
    (41) stmt_ind_open -> stmt_ind_open . D var

    DOT             shift and go to state 36
    D               shift and go to state 37


state 17

    (58) program -> program N .

    N               reduce using rule 58 (program -> program N .)
    $end            reduce using rule 58 (program -> program N .)


state 18

    (14) set -> N M .

    NUMBER          reduce using rule 14 (set -> N M .)
    ZERO            reduce using rule 14 (set -> N M .)


state 19

    (15) if -> N D .

    NUMBER          reduce using rule 15 (if -> N D .)
    ZERO            reduce using rule 15 (if -> N D .)
    M               reduce using rule 15 (if -> N D .)
    D               reduce using rule 15 (if -> N D .)


state 20

    (17) while -> N A . D

    D               shift and go to state 38


state 21

    (56) block -> open_block N .
    (14) set -> N . M
    (15) if -> N . D
    (17) while -> N . A D

    N               reduce using rule 56 (block -> open_block N .)
    $end            reduce using rule 56 (block -> open_block N .)
    S               reduce using rule 56 (block -> open_block N .)
    M               shift and go to state 18
    D               shift and go to state 19
    A               shift and go to state 20


state 22

    (55) open_block -> open_block stmt .

    N               reduce using rule 55 (open_block -> open_block stmt .)


state 23

    (45) stmt_elif -> stmt_if else . block
    (56) block -> . open_block N
    (54) open_block -> . stmt
    (55) open_block -> . open_block stmt
    (47) stmt -> . stmt_def
    (48) stmt -> . stmt_set
    (49) stmt -> . stmt_ret
    (50) stmt -> . stmt_if
    (51) stmt -> . stmt_elif
    (52) stmt -> . stmt_while
    (53) stmt -> . stmt_ind
    (34) stmt_def -> . set NUMBER DOT paramlist block
    (35) stmt_set -> . set NUMBER DOT expr
    (43) stmt_ret -> . set ZERO ZERO DOT expr
    (44) stmt_if -> . if expr block
    (45) stmt_elif -> . stmt_if else block
    (46) stmt_while -> . while expr block
    (42) stmt_ind -> . stmt_ind_open DOT expr
    (14) set -> . N M
    (15) if -> . N D
    (17) while -> . N A D
    (36) stmt_ind_open -> . set NUMBER D NUMBER
    (37) stmt_ind_open -> . set NUMBER D ZERO
    (38) stmt_ind_open -> . set NUMBER D var
    (39) stmt_ind_open -> . stmt_ind_open D NUMBER
    (40) stmt_ind_open -> . stmt_ind_open D ZERO
    (41) stmt_ind_open -> . stmt_ind_open D var

    N               shift and go to state 3

    stmt_if                        shift and go to state 9
    block                          shift and go to state 39
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    stmt_def                       shift and go to state 6
    stmt_set                       shift and go to state 7
    stmt_ret                       shift and go to state 8
    stmt_elif                      shift and go to state 10
    stmt_while                     shift and go to state 11
    stmt_ind                       shift and go to state 12
    set                            shift and go to state 13
    if                             shift and go to state 14
    while                          shift and go to state 15
    stmt_ind_open                  shift and go to state 16

state 24

    (16) else -> S . D

    D               shift and go to state 40


state 25

    (34) stmt_def -> set NUMBER . DOT paramlist block
    (35) stmt_set -> set NUMBER . DOT expr
    (36) stmt_ind_open -> set NUMBER . D NUMBER
    (37) stmt_ind_open -> set NUMBER . D ZERO
    (38) stmt_ind_open -> set NUMBER . D var

    DOT             shift and go to state 41
    D               shift and go to state 42


state 26

    (43) stmt_ret -> set ZERO . ZERO DOT expr

    ZERO            shift and go to state 43


state 27

    (44) stmt_if -> if expr . block
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (56) block -> . open_block N
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S
    (54) open_block -> . stmt
    (55) open_block -> . open_block stmt
    (47) stmt -> . stmt_def
    (48) stmt -> . stmt_set
    (49) stmt -> . stmt_ret
    (50) stmt -> . stmt_if
    (51) stmt -> . stmt_elif
    (52) stmt -> . stmt_while
    (53) stmt -> . stmt_ind
    (34) stmt_def -> . set NUMBER DOT paramlist block
    (35) stmt_set -> . set NUMBER DOT expr
    (43) stmt_ret -> . set ZERO ZERO DOT expr
    (44) stmt_if -> . if expr block
    (45) stmt_elif -> . stmt_if else block
    (46) stmt_while -> . while expr block
    (42) stmt_ind -> . stmt_ind_open DOT expr
    (14) set -> . N M
    (15) if -> . N D
    (17) while -> . N A D
    (36) stmt_ind_open -> . set NUMBER D NUMBER
    (37) stmt_ind_open -> . set NUMBER D ZERO
    (38) stmt_ind_open -> . set NUMBER D var
    (39) stmt_ind_open -> . stmt_ind_open D NUMBER
    (40) stmt_ind_open -> . stmt_ind_open D ZERO
    (41) stmt_ind_open -> . stmt_ind_open D var

    DOT             shift and go to state 49
    S               shift and go to state 50
    A               shift and go to state 51
    D               shift and go to state 52
    M               shift and go to state 53
    N               shift and go to state 3

    if                             shift and go to state 14
    block                          shift and go to state 44
    op0                            shift and go to state 45
    op1                            shift and go to state 46
    op2                            shift and go to state 47
    op3                            shift and go to state 48
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    stmt_def                       shift and go to state 6
    stmt_set                       shift and go to state 7
    stmt_ret                       shift and go to state 8
    stmt_if                        shift and go to state 9
    stmt_elif                      shift and go to state 10
    stmt_while                     shift and go to state 11
    stmt_ind                       shift and go to state 12
    set                            shift and go to state 13
    while                          shift and go to state 15
    stmt_ind_open                  shift and go to state 16

state 28

    (25) expr -> NUMBER .

    DOT             reduce using rule 25 (expr -> NUMBER .)
    S               reduce using rule 25 (expr -> NUMBER .)
    A               reduce using rule 25 (expr -> NUMBER .)
    D               reduce using rule 25 (expr -> NUMBER .)
    M               reduce using rule 25 (expr -> NUMBER .)
    N               reduce using rule 25 (expr -> NUMBER .)


state 29

    (26) expr -> ZERO . NUMBER
    (27) expr -> ZERO .

    NUMBER          shift and go to state 54
    DOT             reduce using rule 27 (expr -> ZERO .)
    S               reduce using rule 27 (expr -> ZERO .)
    A               reduce using rule 27 (expr -> ZERO .)
    D               reduce using rule 27 (expr -> ZERO .)
    M               reduce using rule 27 (expr -> ZERO .)
    N               reduce using rule 27 (expr -> ZERO .)


state 30

    (28) expr -> var .

    DOT             reduce using rule 28 (expr -> var .)
    S               reduce using rule 28 (expr -> var .)
    A               reduce using rule 28 (expr -> var .)
    D               reduce using rule 28 (expr -> var .)
    M               reduce using rule 28 (expr -> var .)
    N               reduce using rule 28 (expr -> var .)


state 31

    (29) expr -> list .

    DOT             reduce using rule 29 (expr -> list .)
    S               reduce using rule 29 (expr -> list .)
    A               reduce using rule 29 (expr -> list .)
    D               reduce using rule 29 (expr -> list .)
    M               reduce using rule 29 (expr -> list .)
    N               reduce using rule 29 (expr -> list .)


state 32

    (1) var -> M . NUMBER
    (2) var -> M . ZERO NUMBER

    NUMBER          shift and go to state 55
    ZERO            shift and go to state 56


state 33

    (21) list -> list_open . expr D DOT
    (19) list_open -> list_open . expr DOT
    (20) list_open -> list_open . expr DOT N
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 28
    ZERO            shift and go to state 29
    M               shift and go to state 32
    D               shift and go to state 34

    list_open                      shift and go to state 33
    expr                           shift and go to state 57
    var                            shift and go to state 30
    list                           shift and go to state 31

state 34

    (22) list -> D . DOT DOT D
    (18) list_open -> D . DOT

    DOT             shift and go to state 58


state 35

    (46) stmt_while -> while expr . block
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (56) block -> . open_block N
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S
    (54) open_block -> . stmt
    (55) open_block -> . open_block stmt
    (47) stmt -> . stmt_def
    (48) stmt -> . stmt_set
    (49) stmt -> . stmt_ret
    (50) stmt -> . stmt_if
    (51) stmt -> . stmt_elif
    (52) stmt -> . stmt_while
    (53) stmt -> . stmt_ind
    (34) stmt_def -> . set NUMBER DOT paramlist block
    (35) stmt_set -> . set NUMBER DOT expr
    (43) stmt_ret -> . set ZERO ZERO DOT expr
    (44) stmt_if -> . if expr block
    (45) stmt_elif -> . stmt_if else block
    (46) stmt_while -> . while expr block
    (42) stmt_ind -> . stmt_ind_open DOT expr
    (14) set -> . N M
    (15) if -> . N D
    (17) while -> . N A D
    (36) stmt_ind_open -> . set NUMBER D NUMBER
    (37) stmt_ind_open -> . set NUMBER D ZERO
    (38) stmt_ind_open -> . set NUMBER D var
    (39) stmt_ind_open -> . stmt_ind_open D NUMBER
    (40) stmt_ind_open -> . stmt_ind_open D ZERO
    (41) stmt_ind_open -> . stmt_ind_open D var

    DOT             shift and go to state 49
    S               shift and go to state 50
    A               shift and go to state 51
    D               shift and go to state 52
    M               shift and go to state 53
    N               shift and go to state 3

    while                          shift and go to state 15
    block                          shift and go to state 59
    op0                            shift and go to state 45
    op1                            shift and go to state 46
    op2                            shift and go to state 47
    op3                            shift and go to state 48
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    stmt_def                       shift and go to state 6
    stmt_set                       shift and go to state 7
    stmt_ret                       shift and go to state 8
    stmt_if                        shift and go to state 9
    stmt_elif                      shift and go to state 10
    stmt_while                     shift and go to state 11
    stmt_ind                       shift and go to state 12
    set                            shift and go to state 13
    if                             shift and go to state 14
    stmt_ind_open                  shift and go to state 16

state 36

    (42) stmt_ind -> stmt_ind_open DOT . expr
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 28
    ZERO            shift and go to state 29
    M               shift and go to state 32
    D               shift and go to state 34

    expr                           shift and go to state 60
    var                            shift and go to state 30
    list                           shift and go to state 31
    list_open                      shift and go to state 33

state 37

    (39) stmt_ind_open -> stmt_ind_open D . NUMBER
    (40) stmt_ind_open -> stmt_ind_open D . ZERO
    (41) stmt_ind_open -> stmt_ind_open D . var
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER

    NUMBER          shift and go to state 61
    ZERO            shift and go to state 62
    M               shift and go to state 32

    var                            shift and go to state 63

state 38

    (17) while -> N A D .

    NUMBER          reduce using rule 17 (while -> N A D .)
    ZERO            reduce using rule 17 (while -> N A D .)
    M               reduce using rule 17 (while -> N A D .)
    D               reduce using rule 17 (while -> N A D .)


state 39

    (45) stmt_elif -> stmt_if else block .

    N               reduce using rule 45 (stmt_elif -> stmt_if else block .)


state 40

    (16) else -> S D .

    N               reduce using rule 16 (else -> S D .)


state 41

    (34) stmt_def -> set NUMBER DOT . paramlist block
    (35) stmt_set -> set NUMBER DOT . expr
    (23) paramlist -> . N NUMBER DOT
    (24) paramlist -> . N NUMBER DOT DOT NUMBER paramlist
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    N               shift and go to state 66
    NUMBER          shift and go to state 28
    ZERO            shift and go to state 29
    M               shift and go to state 32
    D               shift and go to state 34

    paramlist                      shift and go to state 64
    expr                           shift and go to state 65
    var                            shift and go to state 30
    list                           shift and go to state 31
    list_open                      shift and go to state 33

state 42

    (36) stmt_ind_open -> set NUMBER D . NUMBER
    (37) stmt_ind_open -> set NUMBER D . ZERO
    (38) stmt_ind_open -> set NUMBER D . var
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER

    NUMBER          shift and go to state 67
    ZERO            shift and go to state 68
    M               shift and go to state 32

    var                            shift and go to state 69

state 43

    (43) stmt_ret -> set ZERO ZERO . DOT expr

    DOT             shift and go to state 70


state 44

    (44) stmt_if -> if expr block .

    S               reduce using rule 44 (stmt_if -> if expr block .)
    N               reduce using rule 44 (stmt_if -> if expr block .)


state 45

    (30) expr -> expr op0 . expr
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 28
    ZERO            shift and go to state 29
    M               shift and go to state 32
    D               shift and go to state 34

    expr                           shift and go to state 71
    var                            shift and go to state 30
    list                           shift and go to state 31
    list_open                      shift and go to state 33

state 46

    (31) expr -> expr op1 . expr
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 28
    ZERO            shift and go to state 29
    M               shift and go to state 32
    D               shift and go to state 34

    expr                           shift and go to state 72
    var                            shift and go to state 30
    list                           shift and go to state 31
    list_open                      shift and go to state 33

state 47

    (32) expr -> expr op2 . expr
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 28
    ZERO            shift and go to state 29
    M               shift and go to state 32
    D               shift and go to state 34

    expr                           shift and go to state 73
    var                            shift and go to state 30
    list                           shift and go to state 31
    list_open                      shift and go to state 33

state 48

    (33) expr -> expr op3 . expr
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 28
    ZERO            shift and go to state 29
    M               shift and go to state 32
    D               shift and go to state 34

    expr                           shift and go to state 74
    var                            shift and go to state 30
    list                           shift and go to state 31
    list_open                      shift and go to state 33

state 49

    (3) op0 -> DOT . DOT
    (4) op0 -> DOT . S
    (5) op0 -> DOT . A

    DOT             shift and go to state 75
    S               shift and go to state 76
    A               shift and go to state 77


state 50

    (6) op1 -> S .

    NUMBER          reduce using rule 6 (op1 -> S .)
    ZERO            reduce using rule 6 (op1 -> S .)
    M               reduce using rule 6 (op1 -> S .)
    D               reduce using rule 6 (op1 -> S .)


state 51

    (7) op1 -> A .

    NUMBER          reduce using rule 7 (op1 -> A .)
    ZERO            reduce using rule 7 (op1 -> A .)
    M               reduce using rule 7 (op1 -> A .)
    D               reduce using rule 7 (op1 -> A .)


state 52

    (8) op2 -> D .
    (10) op3 -> D . A
    (12) op3 -> D . S

    NUMBER          reduce using rule 8 (op2 -> D .)
    ZERO            reduce using rule 8 (op2 -> D .)
    M               reduce using rule 8 (op2 -> D .)
    D               reduce using rule 8 (op2 -> D .)
    A               shift and go to state 78
    S               shift and go to state 79


state 53

    (9) op2 -> M .
    (11) op3 -> M . A
    (13) op3 -> M . S

    NUMBER          reduce using rule 9 (op2 -> M .)
    ZERO            reduce using rule 9 (op2 -> M .)
    M               reduce using rule 9 (op2 -> M .)
    D               reduce using rule 9 (op2 -> M .)
    A               shift and go to state 80
    S               shift and go to state 81


state 54

    (26) expr -> ZERO NUMBER .

    DOT             reduce using rule 26 (expr -> ZERO NUMBER .)
    S               reduce using rule 26 (expr -> ZERO NUMBER .)
    A               reduce using rule 26 (expr -> ZERO NUMBER .)
    D               reduce using rule 26 (expr -> ZERO NUMBER .)
    M               reduce using rule 26 (expr -> ZERO NUMBER .)
    N               reduce using rule 26 (expr -> ZERO NUMBER .)


state 55

    (1) var -> M NUMBER .

    DOT             reduce using rule 1 (var -> M NUMBER .)
    S               reduce using rule 1 (var -> M NUMBER .)
    A               reduce using rule 1 (var -> M NUMBER .)
    D               reduce using rule 1 (var -> M NUMBER .)
    M               reduce using rule 1 (var -> M NUMBER .)
    N               reduce using rule 1 (var -> M NUMBER .)


state 56

    (2) var -> M ZERO . NUMBER

    NUMBER          shift and go to state 82


state 57

    (21) list -> list_open expr . D DOT
    (19) list_open -> list_open expr . DOT
    (20) list_open -> list_open expr . DOT N
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    D               shift and go to state 83
    DOT             shift and go to state 84
    S               shift and go to state 50
    A               shift and go to state 51
    M               shift and go to state 53

    op0                            shift and go to state 45
    op1                            shift and go to state 46
    op2                            shift and go to state 47
    op3                            shift and go to state 48

state 58

    (22) list -> D DOT . DOT D
    (18) list_open -> D DOT .

    DOT             shift and go to state 85
    NUMBER          reduce using rule 18 (list_open -> D DOT .)
    ZERO            reduce using rule 18 (list_open -> D DOT .)
    M               reduce using rule 18 (list_open -> D DOT .)
    D               reduce using rule 18 (list_open -> D DOT .)


state 59

    (46) stmt_while -> while expr block .

    N               reduce using rule 46 (stmt_while -> while expr block .)


state 60

    (42) stmt_ind -> stmt_ind_open DOT expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    N               reduce using rule 42 (stmt_ind -> stmt_ind_open DOT expr .)
    DOT             shift and go to state 49
    S               shift and go to state 50
    A               shift and go to state 51
    D               shift and go to state 52
    M               shift and go to state 53

    op0                            shift and go to state 45
    op1                            shift and go to state 46
    op2                            shift and go to state 47
    op3                            shift and go to state 48

state 61

    (39) stmt_ind_open -> stmt_ind_open D NUMBER .

    DOT             reduce using rule 39 (stmt_ind_open -> stmt_ind_open D NUMBER .)
    D               reduce using rule 39 (stmt_ind_open -> stmt_ind_open D NUMBER .)


state 62

    (40) stmt_ind_open -> stmt_ind_open D ZERO .

    DOT             reduce using rule 40 (stmt_ind_open -> stmt_ind_open D ZERO .)
    D               reduce using rule 40 (stmt_ind_open -> stmt_ind_open D ZERO .)


state 63

    (41) stmt_ind_open -> stmt_ind_open D var .

    DOT             reduce using rule 41 (stmt_ind_open -> stmt_ind_open D var .)
    D               reduce using rule 41 (stmt_ind_open -> stmt_ind_open D var .)


state 64

    (34) stmt_def -> set NUMBER DOT paramlist . block
    (56) block -> . open_block N
    (54) open_block -> . stmt
    (55) open_block -> . open_block stmt
    (47) stmt -> . stmt_def
    (48) stmt -> . stmt_set
    (49) stmt -> . stmt_ret
    (50) stmt -> . stmt_if
    (51) stmt -> . stmt_elif
    (52) stmt -> . stmt_while
    (53) stmt -> . stmt_ind
    (34) stmt_def -> . set NUMBER DOT paramlist block
    (35) stmt_set -> . set NUMBER DOT expr
    (43) stmt_ret -> . set ZERO ZERO DOT expr
    (44) stmt_if -> . if expr block
    (45) stmt_elif -> . stmt_if else block
    (46) stmt_while -> . while expr block
    (42) stmt_ind -> . stmt_ind_open DOT expr
    (14) set -> . N M
    (15) if -> . N D
    (17) while -> . N A D
    (36) stmt_ind_open -> . set NUMBER D NUMBER
    (37) stmt_ind_open -> . set NUMBER D ZERO
    (38) stmt_ind_open -> . set NUMBER D var
    (39) stmt_ind_open -> . stmt_ind_open D NUMBER
    (40) stmt_ind_open -> . stmt_ind_open D ZERO
    (41) stmt_ind_open -> . stmt_ind_open D var

    N               shift and go to state 3

    set                            shift and go to state 13
    block                          shift and go to state 86
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    stmt_def                       shift and go to state 6
    stmt_set                       shift and go to state 7
    stmt_ret                       shift and go to state 8
    stmt_if                        shift and go to state 9
    stmt_elif                      shift and go to state 10
    stmt_while                     shift and go to state 11
    stmt_ind                       shift and go to state 12
    if                             shift and go to state 14
    while                          shift and go to state 15
    stmt_ind_open                  shift and go to state 16

state 65

    (35) stmt_set -> set NUMBER DOT expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    N               reduce using rule 35 (stmt_set -> set NUMBER DOT expr .)
    DOT             shift and go to state 49
    S               shift and go to state 50
    A               shift and go to state 51
    D               shift and go to state 52
    M               shift and go to state 53

    op0                            shift and go to state 45
    op1                            shift and go to state 46
    op2                            shift and go to state 47
    op3                            shift and go to state 48

state 66

    (23) paramlist -> N . NUMBER DOT
    (24) paramlist -> N . NUMBER DOT DOT NUMBER paramlist

    NUMBER          shift and go to state 87


state 67

    (36) stmt_ind_open -> set NUMBER D NUMBER .

    DOT             reduce using rule 36 (stmt_ind_open -> set NUMBER D NUMBER .)
    D               reduce using rule 36 (stmt_ind_open -> set NUMBER D NUMBER .)


state 68

    (37) stmt_ind_open -> set NUMBER D ZERO .

    DOT             reduce using rule 37 (stmt_ind_open -> set NUMBER D ZERO .)
    D               reduce using rule 37 (stmt_ind_open -> set NUMBER D ZERO .)


state 69

    (38) stmt_ind_open -> set NUMBER D var .

    DOT             reduce using rule 38 (stmt_ind_open -> set NUMBER D var .)
    D               reduce using rule 38 (stmt_ind_open -> set NUMBER D var .)


state 70

    (43) stmt_ret -> set ZERO ZERO DOT . expr
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 28
    ZERO            shift and go to state 29
    M               shift and go to state 32
    D               shift and go to state 34

    expr                           shift and go to state 88
    var                            shift and go to state 30
    list                           shift and go to state 31
    list_open                      shift and go to state 33

state 71

    (30) expr -> expr op0 expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    DOT             reduce using rule 30 (expr -> expr op0 expr .)
    S               reduce using rule 30 (expr -> expr op0 expr .)
    A               reduce using rule 30 (expr -> expr op0 expr .)
    D               reduce using rule 30 (expr -> expr op0 expr .)
    M               reduce using rule 30 (expr -> expr op0 expr .)
    N               reduce using rule 30 (expr -> expr op0 expr .)

  ! DOT             [ shift and go to state 49 ]
  ! S               [ shift and go to state 50 ]
  ! A               [ shift and go to state 51 ]
  ! D               [ shift and go to state 52 ]
  ! M               [ shift and go to state 53 ]

    op0                            shift and go to state 45
    op1                            shift and go to state 46
    op2                            shift and go to state 47
    op3                            shift and go to state 48

state 72

    (31) expr -> expr op1 expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    DOT             reduce using rule 31 (expr -> expr op1 expr .)
    S               reduce using rule 31 (expr -> expr op1 expr .)
    A               reduce using rule 31 (expr -> expr op1 expr .)
    D               reduce using rule 31 (expr -> expr op1 expr .)
    M               reduce using rule 31 (expr -> expr op1 expr .)
    N               reduce using rule 31 (expr -> expr op1 expr .)

  ! DOT             [ shift and go to state 49 ]
  ! S               [ shift and go to state 50 ]
  ! A               [ shift and go to state 51 ]
  ! D               [ shift and go to state 52 ]
  ! M               [ shift and go to state 53 ]

    op1                            shift and go to state 46
    op0                            shift and go to state 45
    op2                            shift and go to state 47
    op3                            shift and go to state 48

state 73

    (32) expr -> expr op2 expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    DOT             reduce using rule 32 (expr -> expr op2 expr .)
    S               reduce using rule 32 (expr -> expr op2 expr .)
    A               reduce using rule 32 (expr -> expr op2 expr .)
    D               reduce using rule 32 (expr -> expr op2 expr .)
    M               reduce using rule 32 (expr -> expr op2 expr .)
    N               reduce using rule 32 (expr -> expr op2 expr .)

  ! DOT             [ shift and go to state 49 ]
  ! S               [ shift and go to state 50 ]
  ! A               [ shift and go to state 51 ]
  ! D               [ shift and go to state 52 ]
  ! M               [ shift and go to state 53 ]

    op2                            shift and go to state 47
    op0                            shift and go to state 45
    op1                            shift and go to state 46
    op3                            shift and go to state 48

state 74

    (33) expr -> expr op3 expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    DOT             reduce using rule 33 (expr -> expr op3 expr .)
    S               reduce using rule 33 (expr -> expr op3 expr .)
    A               reduce using rule 33 (expr -> expr op3 expr .)
    D               reduce using rule 33 (expr -> expr op3 expr .)
    M               reduce using rule 33 (expr -> expr op3 expr .)
    N               reduce using rule 33 (expr -> expr op3 expr .)

  ! DOT             [ shift and go to state 49 ]
  ! S               [ shift and go to state 50 ]
  ! A               [ shift and go to state 51 ]
  ! D               [ shift and go to state 52 ]
  ! M               [ shift and go to state 53 ]

    op3                            shift and go to state 48
    op0                            shift and go to state 45
    op1                            shift and go to state 46
    op2                            shift and go to state 47

state 75

    (3) op0 -> DOT DOT .

    NUMBER          reduce using rule 3 (op0 -> DOT DOT .)
    ZERO            reduce using rule 3 (op0 -> DOT DOT .)
    M               reduce using rule 3 (op0 -> DOT DOT .)
    D               reduce using rule 3 (op0 -> DOT DOT .)


state 76

    (4) op0 -> DOT S .

    NUMBER          reduce using rule 4 (op0 -> DOT S .)
    ZERO            reduce using rule 4 (op0 -> DOT S .)
    M               reduce using rule 4 (op0 -> DOT S .)
    D               reduce using rule 4 (op0 -> DOT S .)


state 77

    (5) op0 -> DOT A .

    NUMBER          reduce using rule 5 (op0 -> DOT A .)
    ZERO            reduce using rule 5 (op0 -> DOT A .)
    M               reduce using rule 5 (op0 -> DOT A .)
    D               reduce using rule 5 (op0 -> DOT A .)


state 78

    (10) op3 -> D A .

    NUMBER          reduce using rule 10 (op3 -> D A .)
    ZERO            reduce using rule 10 (op3 -> D A .)
    M               reduce using rule 10 (op3 -> D A .)
    D               reduce using rule 10 (op3 -> D A .)


state 79

    (12) op3 -> D S .

    NUMBER          reduce using rule 12 (op3 -> D S .)
    ZERO            reduce using rule 12 (op3 -> D S .)
    M               reduce using rule 12 (op3 -> D S .)
    D               reduce using rule 12 (op3 -> D S .)


state 80

    (11) op3 -> M A .

    NUMBER          reduce using rule 11 (op3 -> M A .)
    ZERO            reduce using rule 11 (op3 -> M A .)
    M               reduce using rule 11 (op3 -> M A .)
    D               reduce using rule 11 (op3 -> M A .)


state 81

    (13) op3 -> M S .

    NUMBER          reduce using rule 13 (op3 -> M S .)
    ZERO            reduce using rule 13 (op3 -> M S .)
    M               reduce using rule 13 (op3 -> M S .)
    D               reduce using rule 13 (op3 -> M S .)


state 82

    (2) var -> M ZERO NUMBER .

    DOT             reduce using rule 2 (var -> M ZERO NUMBER .)
    S               reduce using rule 2 (var -> M ZERO NUMBER .)
    A               reduce using rule 2 (var -> M ZERO NUMBER .)
    D               reduce using rule 2 (var -> M ZERO NUMBER .)
    M               reduce using rule 2 (var -> M ZERO NUMBER .)
    N               reduce using rule 2 (var -> M ZERO NUMBER .)


state 83

    (21) list -> list_open expr D . DOT
    (8) op2 -> D .
    (10) op3 -> D . A
    (12) op3 -> D . S

    DOT             shift and go to state 89
    NUMBER          reduce using rule 8 (op2 -> D .)
    ZERO            reduce using rule 8 (op2 -> D .)
    M               reduce using rule 8 (op2 -> D .)
    D               reduce using rule 8 (op2 -> D .)
    A               shift and go to state 78
    S               shift and go to state 79


state 84

    (19) list_open -> list_open expr DOT .
    (20) list_open -> list_open expr DOT . N
    (3) op0 -> DOT . DOT
    (4) op0 -> DOT . S
    (5) op0 -> DOT . A

    NUMBER          reduce using rule 19 (list_open -> list_open expr DOT .)
    ZERO            reduce using rule 19 (list_open -> list_open expr DOT .)
    M               reduce using rule 19 (list_open -> list_open expr DOT .)
    D               reduce using rule 19 (list_open -> list_open expr DOT .)
    N               shift and go to state 90
    DOT             shift and go to state 75
    S               shift and go to state 76
    A               shift and go to state 77


state 85

    (22) list -> D DOT DOT . D

    D               shift and go to state 91


state 86

    (34) stmt_def -> set NUMBER DOT paramlist block .

    N               reduce using rule 34 (stmt_def -> set NUMBER DOT paramlist block .)


state 87

    (23) paramlist -> N NUMBER . DOT
    (24) paramlist -> N NUMBER . DOT DOT NUMBER paramlist

    DOT             shift and go to state 92


state 88

    (43) stmt_ret -> set ZERO ZERO DOT expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    N               reduce using rule 43 (stmt_ret -> set ZERO ZERO DOT expr .)
    DOT             shift and go to state 49
    S               shift and go to state 50
    A               shift and go to state 51
    D               shift and go to state 52
    M               shift and go to state 53

    op0                            shift and go to state 45
    op1                            shift and go to state 46
    op2                            shift and go to state 47
    op3                            shift and go to state 48

state 89

    (21) list -> list_open expr D DOT .

    DOT             reduce using rule 21 (list -> list_open expr D DOT .)
    S               reduce using rule 21 (list -> list_open expr D DOT .)
    A               reduce using rule 21 (list -> list_open expr D DOT .)
    D               reduce using rule 21 (list -> list_open expr D DOT .)
    M               reduce using rule 21 (list -> list_open expr D DOT .)
    N               reduce using rule 21 (list -> list_open expr D DOT .)


state 90

    (20) list_open -> list_open expr DOT N .

    NUMBER          reduce using rule 20 (list_open -> list_open expr DOT N .)
    ZERO            reduce using rule 20 (list_open -> list_open expr DOT N .)
    M               reduce using rule 20 (list_open -> list_open expr DOT N .)
    D               reduce using rule 20 (list_open -> list_open expr DOT N .)


state 91

    (22) list -> D DOT DOT D .

    DOT             reduce using rule 22 (list -> D DOT DOT D .)
    S               reduce using rule 22 (list -> D DOT DOT D .)
    A               reduce using rule 22 (list -> D DOT DOT D .)
    D               reduce using rule 22 (list -> D DOT DOT D .)
    M               reduce using rule 22 (list -> D DOT DOT D .)
    N               reduce using rule 22 (list -> D DOT DOT D .)


state 92

    (23) paramlist -> N NUMBER DOT .
    (24) paramlist -> N NUMBER DOT . DOT NUMBER paramlist

    N               reduce using rule 23 (paramlist -> N NUMBER DOT .)
    DOT             shift and go to state 93


state 93

    (24) paramlist -> N NUMBER DOT DOT . NUMBER paramlist

    NUMBER          shift and go to state 94


state 94

    (24) paramlist -> N NUMBER DOT DOT NUMBER . paramlist
    (23) paramlist -> . N NUMBER DOT
    (24) paramlist -> . N NUMBER DOT DOT NUMBER paramlist

    N               shift and go to state 66

    paramlist                      shift and go to state 95

state 95

    (24) paramlist -> N NUMBER DOT DOT NUMBER paramlist .

    N               reduce using rule 24 (paramlist -> N NUMBER DOT DOT NUMBER paramlist .)

