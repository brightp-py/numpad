Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     var -> M NUMBER
Rule 2     var -> M ZERO NUMBER
Rule 3     op0 -> DOT DOT
Rule 4     op0 -> DOT S
Rule 5     op0 -> DOT A
Rule 6     op1 -> S
Rule 7     op1 -> A
Rule 8     op2 -> D
Rule 9     op2 -> M
Rule 10    op3 -> D A
Rule 11    op3 -> M A
Rule 12    op3 -> D S
Rule 13    op3 -> M S
Rule 14    set -> N M
Rule 15    if -> N D
Rule 16    else -> S D
Rule 17    while -> N A D
Rule 18    list_open -> D DOT
Rule 19    list_open -> list_open expr DOT
Rule 20    list_open -> list_open expr DOT N
Rule 21    list -> list_open expr D DOT
Rule 22    list -> D DOT DOT D
Rule 23    paramlist -> N NUMBER DOT
Rule 24    paramlist -> N NUMBER DOT DOT NUMBER paramlist
Rule 25    expr -> NUMBER
Rule 26    expr -> ZERO NUMBER
Rule 27    expr -> ZERO
Rule 28    expr -> var
Rule 29    expr -> list
Rule 30    expr -> expr op0 expr
Rule 31    expr -> expr op1 expr
Rule 32    expr -> expr op2 expr
Rule 33    expr -> expr op3 expr
Rule 34    stmt_def -> set NUMBER DOT paramlist block
Rule 35    stmt_set -> set NUMBER DOT expr
Rule 36    stmt_ret -> set ZERO ZERO DOT expr
Rule 37    stmt_if -> if expr block
Rule 38    stmt_elif -> stmt_if else block
Rule 39    stmt_while -> while expr block
Rule 40    stmt -> stmt_def
Rule 41    stmt -> stmt_set
Rule 42    stmt -> stmt_ret
Rule 43    stmt -> stmt_if
Rule 44    stmt -> stmt_elif
Rule 45    stmt -> stmt_while
Rule 46    open_block -> stmt
Rule 47    open_block -> open_block stmt
Rule 48    block -> open_block N
Rule 49    program -> block
Rule 50    program -> program N

Terminals, with rules where they appear

A                    : 5 7 10 11 17
D                    : 8 10 12 15 16 17 18 21 22 22
DOT                  : 3 3 4 5 18 19 20 21 22 22 23 24 24 34 35 36
M                    : 1 2 9 11 13 14
N                    : 14 15 17 20 23 24 48 50
NUMBER               : 1 2 23 24 24 25 26 34 35
S                    : 4 6 12 13 16
ZERO                 : 2 26 27 36 36
error                : 

Nonterminals, with rules where they appear

block                : 34 37 38 39 49
else                 : 38
expr                 : 19 20 21 30 30 31 31 32 32 33 33 35 36 37 39
if                   : 37
list                 : 29
list_open            : 19 20 21
op0                  : 30
op1                  : 31
op2                  : 32
op3                  : 33
open_block           : 47 48
paramlist            : 24 34
program              : 50 0
set                  : 34 35 36
stmt                 : 46 47
stmt_def             : 40
stmt_elif            : 44
stmt_if              : 38 43
stmt_ret             : 42
stmt_set             : 41
stmt_while           : 45
var                  : 28
while                : 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (49) program -> . block
    (50) program -> . program N
    (48) block -> . open_block N
    (46) open_block -> . stmt
    (47) open_block -> . open_block stmt
    (40) stmt -> . stmt_def
    (41) stmt -> . stmt_set
    (42) stmt -> . stmt_ret
    (43) stmt -> . stmt_if
    (44) stmt -> . stmt_elif
    (45) stmt -> . stmt_while
    (34) stmt_def -> . set NUMBER DOT paramlist block
    (35) stmt_set -> . set NUMBER DOT expr
    (36) stmt_ret -> . set ZERO ZERO DOT expr
    (37) stmt_if -> . if expr block
    (38) stmt_elif -> . stmt_if else block
    (39) stmt_while -> . while expr block
    (14) set -> . N M
    (15) if -> . N D
    (17) while -> . N A D

    N               shift and go to state 3

    program                        shift and go to state 1
    block                          shift and go to state 2
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    stmt_def                       shift and go to state 6
    stmt_set                       shift and go to state 7
    stmt_ret                       shift and go to state 8
    stmt_if                        shift and go to state 9
    stmt_elif                      shift and go to state 10
    stmt_while                     shift and go to state 11
    set                            shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14

state 1

    (0) S' -> program .
    (50) program -> program . N

    N               shift and go to state 15


state 2

    (49) program -> block .

    N               reduce using rule 49 (program -> block .)
    $end            reduce using rule 49 (program -> block .)


state 3

    (14) set -> N . M
    (15) if -> N . D
    (17) while -> N . A D

    M               shift and go to state 16
    D               shift and go to state 17
    A               shift and go to state 18


state 4

    (48) block -> open_block . N
    (47) open_block -> open_block . stmt
    (40) stmt -> . stmt_def
    (41) stmt -> . stmt_set
    (42) stmt -> . stmt_ret
    (43) stmt -> . stmt_if
    (44) stmt -> . stmt_elif
    (45) stmt -> . stmt_while
    (34) stmt_def -> . set NUMBER DOT paramlist block
    (35) stmt_set -> . set NUMBER DOT expr
    (36) stmt_ret -> . set ZERO ZERO DOT expr
    (37) stmt_if -> . if expr block
    (38) stmt_elif -> . stmt_if else block
    (39) stmt_while -> . while expr block
    (14) set -> . N M
    (15) if -> . N D
    (17) while -> . N A D

    N               shift and go to state 19

    stmt                           shift and go to state 20
    stmt_def                       shift and go to state 6
    stmt_set                       shift and go to state 7
    stmt_ret                       shift and go to state 8
    stmt_if                        shift and go to state 9
    stmt_elif                      shift and go to state 10
    stmt_while                     shift and go to state 11
    set                            shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14

state 5

    (46) open_block -> stmt .

    N               reduce using rule 46 (open_block -> stmt .)


state 6

    (40) stmt -> stmt_def .

    N               reduce using rule 40 (stmt -> stmt_def .)


state 7

    (41) stmt -> stmt_set .

    N               reduce using rule 41 (stmt -> stmt_set .)


state 8

    (42) stmt -> stmt_ret .

    N               reduce using rule 42 (stmt -> stmt_ret .)


state 9

    (43) stmt -> stmt_if .
    (38) stmt_elif -> stmt_if . else block
    (16) else -> . S D

    N               reduce using rule 43 (stmt -> stmt_if .)
    S               shift and go to state 22

    else                           shift and go to state 21

state 10

    (44) stmt -> stmt_elif .

    N               reduce using rule 44 (stmt -> stmt_elif .)


state 11

    (45) stmt -> stmt_while .

    N               reduce using rule 45 (stmt -> stmt_while .)


state 12

    (34) stmt_def -> set . NUMBER DOT paramlist block
    (35) stmt_set -> set . NUMBER DOT expr
    (36) stmt_ret -> set . ZERO ZERO DOT expr

    NUMBER          shift and go to state 23
    ZERO            shift and go to state 24


state 13

    (37) stmt_if -> if . expr block
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 26
    ZERO            shift and go to state 27
    M               shift and go to state 30
    D               shift and go to state 32

    expr                           shift and go to state 25
    var                            shift and go to state 28
    list                           shift and go to state 29
    list_open                      shift and go to state 31

state 14

    (39) stmt_while -> while . expr block
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 26
    ZERO            shift and go to state 27
    M               shift and go to state 30
    D               shift and go to state 32

    expr                           shift and go to state 33
    var                            shift and go to state 28
    list                           shift and go to state 29
    list_open                      shift and go to state 31

state 15

    (50) program -> program N .

    N               reduce using rule 50 (program -> program N .)
    $end            reduce using rule 50 (program -> program N .)


state 16

    (14) set -> N M .

    NUMBER          reduce using rule 14 (set -> N M .)
    ZERO            reduce using rule 14 (set -> N M .)


state 17

    (15) if -> N D .

    NUMBER          reduce using rule 15 (if -> N D .)
    ZERO            reduce using rule 15 (if -> N D .)
    M               reduce using rule 15 (if -> N D .)
    D               reduce using rule 15 (if -> N D .)


state 18

    (17) while -> N A . D

    D               shift and go to state 34


state 19

    (48) block -> open_block N .
    (14) set -> N . M
    (15) if -> N . D
    (17) while -> N . A D

    N               reduce using rule 48 (block -> open_block N .)
    $end            reduce using rule 48 (block -> open_block N .)
    S               reduce using rule 48 (block -> open_block N .)
    M               shift and go to state 16
    D               shift and go to state 17
    A               shift and go to state 18


state 20

    (47) open_block -> open_block stmt .

    N               reduce using rule 47 (open_block -> open_block stmt .)


state 21

    (38) stmt_elif -> stmt_if else . block
    (48) block -> . open_block N
    (46) open_block -> . stmt
    (47) open_block -> . open_block stmt
    (40) stmt -> . stmt_def
    (41) stmt -> . stmt_set
    (42) stmt -> . stmt_ret
    (43) stmt -> . stmt_if
    (44) stmt -> . stmt_elif
    (45) stmt -> . stmt_while
    (34) stmt_def -> . set NUMBER DOT paramlist block
    (35) stmt_set -> . set NUMBER DOT expr
    (36) stmt_ret -> . set ZERO ZERO DOT expr
    (37) stmt_if -> . if expr block
    (38) stmt_elif -> . stmt_if else block
    (39) stmt_while -> . while expr block
    (14) set -> . N M
    (15) if -> . N D
    (17) while -> . N A D

    N               shift and go to state 3

    stmt_if                        shift and go to state 9
    block                          shift and go to state 35
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    stmt_def                       shift and go to state 6
    stmt_set                       shift and go to state 7
    stmt_ret                       shift and go to state 8
    stmt_elif                      shift and go to state 10
    stmt_while                     shift and go to state 11
    set                            shift and go to state 12
    if                             shift and go to state 13
    while                          shift and go to state 14

state 22

    (16) else -> S . D

    D               shift and go to state 36


state 23

    (34) stmt_def -> set NUMBER . DOT paramlist block
    (35) stmt_set -> set NUMBER . DOT expr

    DOT             shift and go to state 37


state 24

    (36) stmt_ret -> set ZERO . ZERO DOT expr

    ZERO            shift and go to state 38


state 25

    (37) stmt_if -> if expr . block
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (48) block -> . open_block N
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S
    (46) open_block -> . stmt
    (47) open_block -> . open_block stmt
    (40) stmt -> . stmt_def
    (41) stmt -> . stmt_set
    (42) stmt -> . stmt_ret
    (43) stmt -> . stmt_if
    (44) stmt -> . stmt_elif
    (45) stmt -> . stmt_while
    (34) stmt_def -> . set NUMBER DOT paramlist block
    (35) stmt_set -> . set NUMBER DOT expr
    (36) stmt_ret -> . set ZERO ZERO DOT expr
    (37) stmt_if -> . if expr block
    (38) stmt_elif -> . stmt_if else block
    (39) stmt_while -> . while expr block
    (14) set -> . N M
    (15) if -> . N D
    (17) while -> . N A D

    DOT             shift and go to state 44
    S               shift and go to state 45
    A               shift and go to state 46
    D               shift and go to state 47
    M               shift and go to state 48
    N               shift and go to state 3

    if                             shift and go to state 13
    block                          shift and go to state 39
    op0                            shift and go to state 40
    op1                            shift and go to state 41
    op2                            shift and go to state 42
    op3                            shift and go to state 43
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    stmt_def                       shift and go to state 6
    stmt_set                       shift and go to state 7
    stmt_ret                       shift and go to state 8
    stmt_if                        shift and go to state 9
    stmt_elif                      shift and go to state 10
    stmt_while                     shift and go to state 11
    set                            shift and go to state 12
    while                          shift and go to state 14

state 26

    (25) expr -> NUMBER .

    DOT             reduce using rule 25 (expr -> NUMBER .)
    S               reduce using rule 25 (expr -> NUMBER .)
    A               reduce using rule 25 (expr -> NUMBER .)
    D               reduce using rule 25 (expr -> NUMBER .)
    M               reduce using rule 25 (expr -> NUMBER .)
    N               reduce using rule 25 (expr -> NUMBER .)


state 27

    (26) expr -> ZERO . NUMBER
    (27) expr -> ZERO .

    NUMBER          shift and go to state 49
    DOT             reduce using rule 27 (expr -> ZERO .)
    S               reduce using rule 27 (expr -> ZERO .)
    A               reduce using rule 27 (expr -> ZERO .)
    D               reduce using rule 27 (expr -> ZERO .)
    M               reduce using rule 27 (expr -> ZERO .)
    N               reduce using rule 27 (expr -> ZERO .)


state 28

    (28) expr -> var .

    DOT             reduce using rule 28 (expr -> var .)
    S               reduce using rule 28 (expr -> var .)
    A               reduce using rule 28 (expr -> var .)
    D               reduce using rule 28 (expr -> var .)
    M               reduce using rule 28 (expr -> var .)
    N               reduce using rule 28 (expr -> var .)


state 29

    (29) expr -> list .

    DOT             reduce using rule 29 (expr -> list .)
    S               reduce using rule 29 (expr -> list .)
    A               reduce using rule 29 (expr -> list .)
    D               reduce using rule 29 (expr -> list .)
    M               reduce using rule 29 (expr -> list .)
    N               reduce using rule 29 (expr -> list .)


state 30

    (1) var -> M . NUMBER
    (2) var -> M . ZERO NUMBER

    NUMBER          shift and go to state 50
    ZERO            shift and go to state 51


state 31

    (21) list -> list_open . expr D DOT
    (19) list_open -> list_open . expr DOT
    (20) list_open -> list_open . expr DOT N
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 26
    ZERO            shift and go to state 27
    M               shift and go to state 30
    D               shift and go to state 32

    list_open                      shift and go to state 31
    expr                           shift and go to state 52
    var                            shift and go to state 28
    list                           shift and go to state 29

state 32

    (22) list -> D . DOT DOT D
    (18) list_open -> D . DOT

    DOT             shift and go to state 53


state 33

    (39) stmt_while -> while expr . block
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (48) block -> . open_block N
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S
    (46) open_block -> . stmt
    (47) open_block -> . open_block stmt
    (40) stmt -> . stmt_def
    (41) stmt -> . stmt_set
    (42) stmt -> . stmt_ret
    (43) stmt -> . stmt_if
    (44) stmt -> . stmt_elif
    (45) stmt -> . stmt_while
    (34) stmt_def -> . set NUMBER DOT paramlist block
    (35) stmt_set -> . set NUMBER DOT expr
    (36) stmt_ret -> . set ZERO ZERO DOT expr
    (37) stmt_if -> . if expr block
    (38) stmt_elif -> . stmt_if else block
    (39) stmt_while -> . while expr block
    (14) set -> . N M
    (15) if -> . N D
    (17) while -> . N A D

    DOT             shift and go to state 44
    S               shift and go to state 45
    A               shift and go to state 46
    D               shift and go to state 47
    M               shift and go to state 48
    N               shift and go to state 3

    while                          shift and go to state 14
    block                          shift and go to state 54
    op0                            shift and go to state 40
    op1                            shift and go to state 41
    op2                            shift and go to state 42
    op3                            shift and go to state 43
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    stmt_def                       shift and go to state 6
    stmt_set                       shift and go to state 7
    stmt_ret                       shift and go to state 8
    stmt_if                        shift and go to state 9
    stmt_elif                      shift and go to state 10
    stmt_while                     shift and go to state 11
    set                            shift and go to state 12
    if                             shift and go to state 13

state 34

    (17) while -> N A D .

    NUMBER          reduce using rule 17 (while -> N A D .)
    ZERO            reduce using rule 17 (while -> N A D .)
    M               reduce using rule 17 (while -> N A D .)
    D               reduce using rule 17 (while -> N A D .)


state 35

    (38) stmt_elif -> stmt_if else block .

    N               reduce using rule 38 (stmt_elif -> stmt_if else block .)


state 36

    (16) else -> S D .

    N               reduce using rule 16 (else -> S D .)


state 37

    (34) stmt_def -> set NUMBER DOT . paramlist block
    (35) stmt_set -> set NUMBER DOT . expr
    (23) paramlist -> . N NUMBER DOT
    (24) paramlist -> . N NUMBER DOT DOT NUMBER paramlist
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    N               shift and go to state 57
    NUMBER          shift and go to state 26
    ZERO            shift and go to state 27
    M               shift and go to state 30
    D               shift and go to state 32

    paramlist                      shift and go to state 55
    expr                           shift and go to state 56
    var                            shift and go to state 28
    list                           shift and go to state 29
    list_open                      shift and go to state 31

state 38

    (36) stmt_ret -> set ZERO ZERO . DOT expr

    DOT             shift and go to state 58


state 39

    (37) stmt_if -> if expr block .

    S               reduce using rule 37 (stmt_if -> if expr block .)
    N               reduce using rule 37 (stmt_if -> if expr block .)


state 40

    (30) expr -> expr op0 . expr
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 26
    ZERO            shift and go to state 27
    M               shift and go to state 30
    D               shift and go to state 32

    expr                           shift and go to state 59
    var                            shift and go to state 28
    list                           shift and go to state 29
    list_open                      shift and go to state 31

state 41

    (31) expr -> expr op1 . expr
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 26
    ZERO            shift and go to state 27
    M               shift and go to state 30
    D               shift and go to state 32

    expr                           shift and go to state 60
    var                            shift and go to state 28
    list                           shift and go to state 29
    list_open                      shift and go to state 31

state 42

    (32) expr -> expr op2 . expr
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 26
    ZERO            shift and go to state 27
    M               shift and go to state 30
    D               shift and go to state 32

    expr                           shift and go to state 61
    var                            shift and go to state 28
    list                           shift and go to state 29
    list_open                      shift and go to state 31

state 43

    (33) expr -> expr op3 . expr
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 26
    ZERO            shift and go to state 27
    M               shift and go to state 30
    D               shift and go to state 32

    expr                           shift and go to state 62
    var                            shift and go to state 28
    list                           shift and go to state 29
    list_open                      shift and go to state 31

state 44

    (3) op0 -> DOT . DOT
    (4) op0 -> DOT . S
    (5) op0 -> DOT . A

    DOT             shift and go to state 63
    S               shift and go to state 64
    A               shift and go to state 65


state 45

    (6) op1 -> S .

    NUMBER          reduce using rule 6 (op1 -> S .)
    ZERO            reduce using rule 6 (op1 -> S .)
    M               reduce using rule 6 (op1 -> S .)
    D               reduce using rule 6 (op1 -> S .)


state 46

    (7) op1 -> A .

    NUMBER          reduce using rule 7 (op1 -> A .)
    ZERO            reduce using rule 7 (op1 -> A .)
    M               reduce using rule 7 (op1 -> A .)
    D               reduce using rule 7 (op1 -> A .)


state 47

    (8) op2 -> D .
    (10) op3 -> D . A
    (12) op3 -> D . S

    NUMBER          reduce using rule 8 (op2 -> D .)
    ZERO            reduce using rule 8 (op2 -> D .)
    M               reduce using rule 8 (op2 -> D .)
    D               reduce using rule 8 (op2 -> D .)
    A               shift and go to state 66
    S               shift and go to state 67


state 48

    (9) op2 -> M .
    (11) op3 -> M . A
    (13) op3 -> M . S

    NUMBER          reduce using rule 9 (op2 -> M .)
    ZERO            reduce using rule 9 (op2 -> M .)
    M               reduce using rule 9 (op2 -> M .)
    D               reduce using rule 9 (op2 -> M .)
    A               shift and go to state 68
    S               shift and go to state 69


state 49

    (26) expr -> ZERO NUMBER .

    DOT             reduce using rule 26 (expr -> ZERO NUMBER .)
    S               reduce using rule 26 (expr -> ZERO NUMBER .)
    A               reduce using rule 26 (expr -> ZERO NUMBER .)
    D               reduce using rule 26 (expr -> ZERO NUMBER .)
    M               reduce using rule 26 (expr -> ZERO NUMBER .)
    N               reduce using rule 26 (expr -> ZERO NUMBER .)


state 50

    (1) var -> M NUMBER .

    DOT             reduce using rule 1 (var -> M NUMBER .)
    S               reduce using rule 1 (var -> M NUMBER .)
    A               reduce using rule 1 (var -> M NUMBER .)
    D               reduce using rule 1 (var -> M NUMBER .)
    M               reduce using rule 1 (var -> M NUMBER .)
    N               reduce using rule 1 (var -> M NUMBER .)


state 51

    (2) var -> M ZERO . NUMBER

    NUMBER          shift and go to state 70


state 52

    (21) list -> list_open expr . D DOT
    (19) list_open -> list_open expr . DOT
    (20) list_open -> list_open expr . DOT N
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    D               shift and go to state 71
    DOT             shift and go to state 72
    S               shift and go to state 45
    A               shift and go to state 46
    M               shift and go to state 48

    op0                            shift and go to state 40
    op1                            shift and go to state 41
    op2                            shift and go to state 42
    op3                            shift and go to state 43

state 53

    (22) list -> D DOT . DOT D
    (18) list_open -> D DOT .

    DOT             shift and go to state 73
    NUMBER          reduce using rule 18 (list_open -> D DOT .)
    ZERO            reduce using rule 18 (list_open -> D DOT .)
    M               reduce using rule 18 (list_open -> D DOT .)
    D               reduce using rule 18 (list_open -> D DOT .)


state 54

    (39) stmt_while -> while expr block .

    N               reduce using rule 39 (stmt_while -> while expr block .)


state 55

    (34) stmt_def -> set NUMBER DOT paramlist . block
    (48) block -> . open_block N
    (46) open_block -> . stmt
    (47) open_block -> . open_block stmt
    (40) stmt -> . stmt_def
    (41) stmt -> . stmt_set
    (42) stmt -> . stmt_ret
    (43) stmt -> . stmt_if
    (44) stmt -> . stmt_elif
    (45) stmt -> . stmt_while
    (34) stmt_def -> . set NUMBER DOT paramlist block
    (35) stmt_set -> . set NUMBER DOT expr
    (36) stmt_ret -> . set ZERO ZERO DOT expr
    (37) stmt_if -> . if expr block
    (38) stmt_elif -> . stmt_if else block
    (39) stmt_while -> . while expr block
    (14) set -> . N M
    (15) if -> . N D
    (17) while -> . N A D

    N               shift and go to state 3

    set                            shift and go to state 12
    block                          shift and go to state 74
    open_block                     shift and go to state 4
    stmt                           shift and go to state 5
    stmt_def                       shift and go to state 6
    stmt_set                       shift and go to state 7
    stmt_ret                       shift and go to state 8
    stmt_if                        shift and go to state 9
    stmt_elif                      shift and go to state 10
    stmt_while                     shift and go to state 11
    if                             shift and go to state 13
    while                          shift and go to state 14

state 56

    (35) stmt_set -> set NUMBER DOT expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    N               reduce using rule 35 (stmt_set -> set NUMBER DOT expr .)
    DOT             shift and go to state 44
    S               shift and go to state 45
    A               shift and go to state 46
    D               shift and go to state 47
    M               shift and go to state 48

    op0                            shift and go to state 40
    op1                            shift and go to state 41
    op2                            shift and go to state 42
    op3                            shift and go to state 43

state 57

    (23) paramlist -> N . NUMBER DOT
    (24) paramlist -> N . NUMBER DOT DOT NUMBER paramlist

    NUMBER          shift and go to state 75


state 58

    (36) stmt_ret -> set ZERO ZERO DOT . expr
    (25) expr -> . NUMBER
    (26) expr -> . ZERO NUMBER
    (27) expr -> . ZERO
    (28) expr -> . var
    (29) expr -> . list
    (30) expr -> . expr op0 expr
    (31) expr -> . expr op1 expr
    (32) expr -> . expr op2 expr
    (33) expr -> . expr op3 expr
    (1) var -> . M NUMBER
    (2) var -> . M ZERO NUMBER
    (21) list -> . list_open expr D DOT
    (22) list -> . D DOT DOT D
    (18) list_open -> . D DOT
    (19) list_open -> . list_open expr DOT
    (20) list_open -> . list_open expr DOT N

    NUMBER          shift and go to state 26
    ZERO            shift and go to state 27
    M               shift and go to state 30
    D               shift and go to state 32

    expr                           shift and go to state 76
    var                            shift and go to state 28
    list                           shift and go to state 29
    list_open                      shift and go to state 31

state 59

    (30) expr -> expr op0 expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    DOT             reduce using rule 30 (expr -> expr op0 expr .)
    S               reduce using rule 30 (expr -> expr op0 expr .)
    A               reduce using rule 30 (expr -> expr op0 expr .)
    D               reduce using rule 30 (expr -> expr op0 expr .)
    M               reduce using rule 30 (expr -> expr op0 expr .)
    N               reduce using rule 30 (expr -> expr op0 expr .)

  ! DOT             [ shift and go to state 44 ]
  ! S               [ shift and go to state 45 ]
  ! A               [ shift and go to state 46 ]
  ! D               [ shift and go to state 47 ]
  ! M               [ shift and go to state 48 ]

    op0                            shift and go to state 40
    op1                            shift and go to state 41
    op2                            shift and go to state 42
    op3                            shift and go to state 43

state 60

    (31) expr -> expr op1 expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    DOT             reduce using rule 31 (expr -> expr op1 expr .)
    S               reduce using rule 31 (expr -> expr op1 expr .)
    A               reduce using rule 31 (expr -> expr op1 expr .)
    D               reduce using rule 31 (expr -> expr op1 expr .)
    M               reduce using rule 31 (expr -> expr op1 expr .)
    N               reduce using rule 31 (expr -> expr op1 expr .)

  ! DOT             [ shift and go to state 44 ]
  ! S               [ shift and go to state 45 ]
  ! A               [ shift and go to state 46 ]
  ! D               [ shift and go to state 47 ]
  ! M               [ shift and go to state 48 ]

    op1                            shift and go to state 41
    op0                            shift and go to state 40
    op2                            shift and go to state 42
    op3                            shift and go to state 43

state 61

    (32) expr -> expr op2 expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    DOT             reduce using rule 32 (expr -> expr op2 expr .)
    S               reduce using rule 32 (expr -> expr op2 expr .)
    A               reduce using rule 32 (expr -> expr op2 expr .)
    D               reduce using rule 32 (expr -> expr op2 expr .)
    M               reduce using rule 32 (expr -> expr op2 expr .)
    N               reduce using rule 32 (expr -> expr op2 expr .)

  ! DOT             [ shift and go to state 44 ]
  ! S               [ shift and go to state 45 ]
  ! A               [ shift and go to state 46 ]
  ! D               [ shift and go to state 47 ]
  ! M               [ shift and go to state 48 ]

    op2                            shift and go to state 42
    op0                            shift and go to state 40
    op1                            shift and go to state 41
    op3                            shift and go to state 43

state 62

    (33) expr -> expr op3 expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    DOT             reduce using rule 33 (expr -> expr op3 expr .)
    S               reduce using rule 33 (expr -> expr op3 expr .)
    A               reduce using rule 33 (expr -> expr op3 expr .)
    D               reduce using rule 33 (expr -> expr op3 expr .)
    M               reduce using rule 33 (expr -> expr op3 expr .)
    N               reduce using rule 33 (expr -> expr op3 expr .)

  ! DOT             [ shift and go to state 44 ]
  ! S               [ shift and go to state 45 ]
  ! A               [ shift and go to state 46 ]
  ! D               [ shift and go to state 47 ]
  ! M               [ shift and go to state 48 ]

    op3                            shift and go to state 43
    op0                            shift and go to state 40
    op1                            shift and go to state 41
    op2                            shift and go to state 42

state 63

    (3) op0 -> DOT DOT .

    NUMBER          reduce using rule 3 (op0 -> DOT DOT .)
    ZERO            reduce using rule 3 (op0 -> DOT DOT .)
    M               reduce using rule 3 (op0 -> DOT DOT .)
    D               reduce using rule 3 (op0 -> DOT DOT .)


state 64

    (4) op0 -> DOT S .

    NUMBER          reduce using rule 4 (op0 -> DOT S .)
    ZERO            reduce using rule 4 (op0 -> DOT S .)
    M               reduce using rule 4 (op0 -> DOT S .)
    D               reduce using rule 4 (op0 -> DOT S .)


state 65

    (5) op0 -> DOT A .

    NUMBER          reduce using rule 5 (op0 -> DOT A .)
    ZERO            reduce using rule 5 (op0 -> DOT A .)
    M               reduce using rule 5 (op0 -> DOT A .)
    D               reduce using rule 5 (op0 -> DOT A .)


state 66

    (10) op3 -> D A .

    NUMBER          reduce using rule 10 (op3 -> D A .)
    ZERO            reduce using rule 10 (op3 -> D A .)
    M               reduce using rule 10 (op3 -> D A .)
    D               reduce using rule 10 (op3 -> D A .)


state 67

    (12) op3 -> D S .

    NUMBER          reduce using rule 12 (op3 -> D S .)
    ZERO            reduce using rule 12 (op3 -> D S .)
    M               reduce using rule 12 (op3 -> D S .)
    D               reduce using rule 12 (op3 -> D S .)


state 68

    (11) op3 -> M A .

    NUMBER          reduce using rule 11 (op3 -> M A .)
    ZERO            reduce using rule 11 (op3 -> M A .)
    M               reduce using rule 11 (op3 -> M A .)
    D               reduce using rule 11 (op3 -> M A .)


state 69

    (13) op3 -> M S .

    NUMBER          reduce using rule 13 (op3 -> M S .)
    ZERO            reduce using rule 13 (op3 -> M S .)
    M               reduce using rule 13 (op3 -> M S .)
    D               reduce using rule 13 (op3 -> M S .)


state 70

    (2) var -> M ZERO NUMBER .

    DOT             reduce using rule 2 (var -> M ZERO NUMBER .)
    S               reduce using rule 2 (var -> M ZERO NUMBER .)
    A               reduce using rule 2 (var -> M ZERO NUMBER .)
    D               reduce using rule 2 (var -> M ZERO NUMBER .)
    M               reduce using rule 2 (var -> M ZERO NUMBER .)
    N               reduce using rule 2 (var -> M ZERO NUMBER .)


state 71

    (21) list -> list_open expr D . DOT
    (8) op2 -> D .
    (10) op3 -> D . A
    (12) op3 -> D . S

    DOT             shift and go to state 77
    NUMBER          reduce using rule 8 (op2 -> D .)
    ZERO            reduce using rule 8 (op2 -> D .)
    M               reduce using rule 8 (op2 -> D .)
    D               reduce using rule 8 (op2 -> D .)
    A               shift and go to state 66
    S               shift and go to state 67


state 72

    (19) list_open -> list_open expr DOT .
    (20) list_open -> list_open expr DOT . N
    (3) op0 -> DOT . DOT
    (4) op0 -> DOT . S
    (5) op0 -> DOT . A

    NUMBER          reduce using rule 19 (list_open -> list_open expr DOT .)
    ZERO            reduce using rule 19 (list_open -> list_open expr DOT .)
    M               reduce using rule 19 (list_open -> list_open expr DOT .)
    D               reduce using rule 19 (list_open -> list_open expr DOT .)
    N               shift and go to state 78
    DOT             shift and go to state 63
    S               shift and go to state 64
    A               shift and go to state 65


state 73

    (22) list -> D DOT DOT . D

    D               shift and go to state 79


state 74

    (34) stmt_def -> set NUMBER DOT paramlist block .

    N               reduce using rule 34 (stmt_def -> set NUMBER DOT paramlist block .)


state 75

    (23) paramlist -> N NUMBER . DOT
    (24) paramlist -> N NUMBER . DOT DOT NUMBER paramlist

    DOT             shift and go to state 80


state 76

    (36) stmt_ret -> set ZERO ZERO DOT expr .
    (30) expr -> expr . op0 expr
    (31) expr -> expr . op1 expr
    (32) expr -> expr . op2 expr
    (33) expr -> expr . op3 expr
    (3) op0 -> . DOT DOT
    (4) op0 -> . DOT S
    (5) op0 -> . DOT A
    (6) op1 -> . S
    (7) op1 -> . A
    (8) op2 -> . D
    (9) op2 -> . M
    (10) op3 -> . D A
    (11) op3 -> . M A
    (12) op3 -> . D S
    (13) op3 -> . M S

    N               reduce using rule 36 (stmt_ret -> set ZERO ZERO DOT expr .)
    DOT             shift and go to state 44
    S               shift and go to state 45
    A               shift and go to state 46
    D               shift and go to state 47
    M               shift and go to state 48

    op0                            shift and go to state 40
    op1                            shift and go to state 41
    op2                            shift and go to state 42
    op3                            shift and go to state 43

state 77

    (21) list -> list_open expr D DOT .

    DOT             reduce using rule 21 (list -> list_open expr D DOT .)
    S               reduce using rule 21 (list -> list_open expr D DOT .)
    A               reduce using rule 21 (list -> list_open expr D DOT .)
    D               reduce using rule 21 (list -> list_open expr D DOT .)
    M               reduce using rule 21 (list -> list_open expr D DOT .)
    N               reduce using rule 21 (list -> list_open expr D DOT .)


state 78

    (20) list_open -> list_open expr DOT N .

    NUMBER          reduce using rule 20 (list_open -> list_open expr DOT N .)
    ZERO            reduce using rule 20 (list_open -> list_open expr DOT N .)
    M               reduce using rule 20 (list_open -> list_open expr DOT N .)
    D               reduce using rule 20 (list_open -> list_open expr DOT N .)


state 79

    (22) list -> D DOT DOT D .

    DOT             reduce using rule 22 (list -> D DOT DOT D .)
    S               reduce using rule 22 (list -> D DOT DOT D .)
    A               reduce using rule 22 (list -> D DOT DOT D .)
    D               reduce using rule 22 (list -> D DOT DOT D .)
    M               reduce using rule 22 (list -> D DOT DOT D .)
    N               reduce using rule 22 (list -> D DOT DOT D .)


state 80

    (23) paramlist -> N NUMBER DOT .
    (24) paramlist -> N NUMBER DOT . DOT NUMBER paramlist

    N               reduce using rule 23 (paramlist -> N NUMBER DOT .)
    DOT             shift and go to state 81


state 81

    (24) paramlist -> N NUMBER DOT DOT . NUMBER paramlist

    NUMBER          shift and go to state 82


state 82

    (24) paramlist -> N NUMBER DOT DOT NUMBER . paramlist
    (23) paramlist -> . N NUMBER DOT
    (24) paramlist -> . N NUMBER DOT DOT NUMBER paramlist

    N               shift and go to state 57

    paramlist                      shift and go to state 83

state 83

    (24) paramlist -> N NUMBER DOT DOT NUMBER paramlist .

    N               reduce using rule 24 (paramlist -> N NUMBER DOT DOT NUMBER paramlist .)

